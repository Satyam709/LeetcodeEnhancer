{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA;;AAEA;AACA,EAAE,KAA4D;AAC9D,EAAE,CACwG;AAC1G,CAAC,uBAAuB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI,UAAU;;AAEd;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,aAAa;AAC1G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6EAA6E,eAAe;AAC5F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,o/BAAo/B;;AAEp/B;AACA,0ZAA0Z;AAC1Z;AACA;AACA;;AAEA;AACA,iUAAiU;AACjU;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,EAAE,iBAAiB,EAAE,MAAM;;AAE3D;AACA,+BAA+B,QAAQ;AACvC,wDAAwD;;AAExD,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC,aAAa,mBAAmB;AAChC,cAAc,oBAAoB;AAClC;AACA;;;AAGA;AACA;AACA;AACA,MAAM;AACN;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4CAA4C;AAC5C;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA,kBAAkB,sBAAsB;AACxC,kBAAkB,sBAAsB;AACxC,kBAAkB,SAAS;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,+CAA+C;AAC/C;;AAEA;AACA,6CAA6C;AAC7C;;AAEA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA,sKAAsK;;AAEtK;AACA;;AAEA,wDAAwD;AACxD,wDAAwD;AACxD,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,sDAAsD;AACtD,sDAAsD;AACtD;AACA,uDAAuD;;AAEvD,uDAAuD;;AAEvD,sEAAsE;;AAEtE,yEAAyE;;AAEzE,4DAA4D;;AAE5D,oDAAoD;;AAEpD,4CAA4C;;AAE5C,8DAA8D;;AAE9D,8DAA8D;;AAE9D,4CAA4C;;AAE5C,iDAAiD;;AAEjD,gEAAgE;;AAEhE,iDAAiD;;AAEjD,wCAAwC;;AAExC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA,kCAAkC;AAClC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;;AAGV,uDAAuD;;AAEvD;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;;;AAGV;AACA;AACA;AACA,QAAQ;AACR;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA,sDAAsD;AACtD,+CAA+C,yDAAyD;AACxG;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA,2CAA2C;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;;AAGA;AACA;AACA,UAAU;AACV;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;;AAGA;AACA;AACA,UAAU;AACV;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;;;AAGA;AACA,QAAQ;;;AAGR;AACA;AACA,QAAQ;AACR;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;;;AAGA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,MAAM;AACtB;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA,SAAS;AACT;;AAEA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA,YAAY;AACZ,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,UAAU;AAC1B;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,UAAU,WAAW;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,MAAM;AACtB,gBAAgB,QAAQ;AACxB;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB,iBAAiB,SAAS;AAC1B;;;AAGA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;;AAGA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;;;AAG5C,sFAAsF,6DAA6D;AACnJ;AACA;AACA;AACA;AACA;AACA,uTAAuT;AACvT;AACA;AACA;;AAEA,QAAQ,wCAAwC,oFAAoF,oKAAoK,iHAAiH;AACzZ;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAQ;AACR,sCAAsC;;AAEtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C;;AAE7C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,+CAA+C;;;AAG/C;AACA;AACA;;;AAGA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;;;AAGA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,QAAQ;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB;;;AAGA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,UAAU;AAC1B;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,CAAC;AACD;;;;;;;;;;;;;;;;AChmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB,kBAAkB,oBAAoB,cAAc,gBAAgB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB,kBAAkB,oBAAoB,cAAc,gBAAgB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB,kBAAkB,oBAAoB,cAAc,gBAAgB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnGqH;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,8BAA8B,qGAAmC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,0BAA0B;AAClE,wCAAwC,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/CqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/GyE;AACY;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8FAAoB;AACtC;AACA,wBAAwB,sFAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/BA;AAC0G;AAClB;AACf;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iGAAqB;AACvC;AACA,wBAAwB,sFAAgB;AACxC;AACA;AACA;AACA;AACA;AACA,mBAAmB,iGAAqB;AACxC;AACA,wBAAwB,iGAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iGAAqB;AACxC;AACA,0BAA0B,iGAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iGAAqB;AACvC,2BAA2B,iGAAqB;AAChD,8BAA8B,iGAAqB;AACnD,kCAAkC,iGAAqB;AACvD,kCAAkC,iGAAqB;AACvD,iCAAiC,iGAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,oDAAQ;AACvF,kFAAkF,sDAAU;AAC5F,uFAAuF,4DAAgB;AACvG,uFAAuF,4DAAgB;AACvG,sFAAsF,2DAAe;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAU;AAClC;AACA;AACA;AACA,oBAAoB,iGAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iGAAqB;AACzC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1IA;AACyE;AACY;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8FAAoB;AACtC;AACA,wBAAwB,8FAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8FAAoB;AACtC,sBAAsB,qBAAqB;AAC3C,sBAAsB,8FAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8FAAoB;AACtC;AACA,wBAAwB,sFAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjCoB;AACpB;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA,4DAA4D,iCAAiC,UAAU,MAAM,OAAO,+BAA+B;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB,IAAI,SAAS,IAAI,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4DAAsB;AAC3D,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAY;AAC1C,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iDAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qDAAe;AACzE;AACA;AACA;AACA,yCAAyC,SAAS,IAAI,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAe;AACrC,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA,iCAAiC,gDAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQE;;;;;;;;;;;;;;;;;;;AC1RmF;AAC6B;AAClH;AACA;AACA;AACA;AACA;AACA,iCAAiC,8FAAwB;AACzD,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,yFAAmC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8FAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,sFAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtEsC;AACtC;AACA;AACA;AACA;AACA,wBAAwB,+CAAS;AACjC,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5CA;AACsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+CAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/JsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtCsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uCAAuC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAuC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,+CAAS;AACjE;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAiD;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qCAAqC,sCAAsC;AAC3E;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1EsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yCAAyC;AAC9E;AACA;AACA;AACA,6BAA6B,uCAAuC;AACpE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,+CAAS;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uCAAuC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACuC;;;;;;;;;;;;;;;;;AChGA;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE;AACA;AACA,sBAAsB;AACtB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAA4C;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+CAAS;AACjD;AACA,sBAAsB,uCAAuC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvEA;AACuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uCAAuC;AAC5E;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAAS;AACtD;AACA,iCAAiC,uCAAuC;AACxzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkF;AAClF;;;;;;;;;;;;;;;;;;;;;ACpGA;AACgG;AACrB;AAC3B;AAC8C;AACxC;AACtD;AACA;AACA;AACA;AACA,mCAAmC,yGAA6B;AAChE,+BAA+B,uGAAqC;AACpE,gCAAgC,2DAAY;AAC5C;AACA,gCAAgC,+DAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,wBAAwB;AAC9F,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA,+BAA+B,oFAAmB;AAClD;AACA,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/DyF;AACK;AAC5C;AACiC;AACnF;AACA;AACA;AACA;AACA;AACA,mCAAmC,uGAA4B;AAC/D,+BAA+B,kGAAgC;AAC/D,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4FAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxC6F;AACkB;AAClB;AACtD;AACY;AACZ;AACmD;AACnC;AACvD;AACA;AACA;AACA,oCAAoC,qGAA2B;AAC/D,+BAA+B,kGAAgC;AAC/D,gCAAgC,2DAAY;AAC5C;AACA;AACA,gCAAgC,+DAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+CAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+CAAkB;AAClD;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,uBAAuB,8FAAwB;AAC/C,sDAAsD,kBAAkB;AACxE,UAAU;AACV,uBAAuB,iGAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpIA;AAC2F;AACD;AACjB;AACvB;AACI;AACtD;AACA;AACA;AACA,mCAAmC,mGAA0B;AAC7D,+BAA+B,oGAAkC;AACjE,gCAAgC,2DAAY;AAC5C;AACA;AACA,gCAAgC,+DAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C,sBAAsB;AACtB,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kFAAkB;AAC5C,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrDA;AACkD;AACwC;AACY;AAC3B;AACrB;AACtD;AACA;AACA;AACA,oCAAoC,+GAAgC;AACpE,+BAA+B,mGAAiC;AAChE,gCAAgC,2DAAY;AAC5C;AACA;AACA,gCAAgC,+DAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,8BAA8B,oFAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC5DA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNA;AACuF;AACR;AACJ;AACE;AACf;AACW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0BAA0B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wFAAoB,EAAE,gGAAwB,EAAE,oFAAkB;AAC9G,8CAA8C,wFAAoB,EAAE,oFAAkB;AACtF,yCAAyC,sFAAmB,EAAE,kFAAiB;AAC/E,2CAA2C,oFAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA,sB","sources":["webpack://LeetcodePremiumUnlocker/./node_modules/dompurify/dist/purify.js","webpack://LeetcodePremiumUnlocker/./src/modules/AnalyticsManager.js","webpack://LeetcodePremiumUnlocker/./src/modules/BufferManager/GoogleSheetsBufferManager.js","webpack://LeetcodePremiumUnlocker/./src/modules/ContainerManager.js","webpack://LeetcodePremiumUnlocker/./src/modules/ContentBuilder/EditorialContentBuilder.js","webpack://LeetcodePremiumUnlocker/./src/modules/ContentBuilder/TableContentBuilder.js","webpack://LeetcodePremiumUnlocker/./src/modules/ContentBuilder/TagsContentBuilder.js","webpack://LeetcodePremiumUnlocker/./src/modules/DataFetcher/GoogleSheetsDataFetcher.js","webpack://LeetcodePremiumUnlocker/./src/modules/DataFetcher/LocalStorageDataFetcher.js","webpack://LeetcodePremiumUnlocker/./src/modules/ElementGenerator/ElementHelperClass.js","webpack://LeetcodePremiumUnlocker/./src/modules/ElementGenerator/TableContentElementGenerator.js","webpack://LeetcodePremiumUnlocker/./src/modules/ElementGenerator/TagContentElementGenerator.js","webpack://LeetcodePremiumUnlocker/./src/modules/ElementModifier/CompanySwipperElementModifier.js","webpack://LeetcodePremiumUnlocker/./src/modules/ElementModifier/EditorialPageElementModifier.js","webpack://LeetcodePremiumUnlocker/./src/modules/ElementModifier/ProblemTableElementModifier.js","webpack://LeetcodePremiumUnlocker/./src/modules/ElementModifier/ProblemTagsElementModifier.js","webpack://LeetcodePremiumUnlocker/./src/modules/ElementModifier/TopProblemFoldoutElementModifier.js","webpack://LeetcodePremiumUnlocker/./src/modules/Objects.js","webpack://LeetcodePremiumUnlocker/./src/modules/ProblemSorter.js","webpack://LeetcodePremiumUnlocker/./src/modules/Unlocker/CompaniesProblemUnlocker.js","webpack://LeetcodePremiumUnlocker/./src/modules/Unlocker/EditorialUnlocker.js","webpack://LeetcodePremiumUnlocker/./src/modules/Unlocker/ProblemTableUnlocker.js","webpack://LeetcodePremiumUnlocker/./src/modules/Unlocker/ProblemTagsUnlocker.js","webpack://LeetcodePremiumUnlocker/./src/modules/Unlocker/TopProblemUnlocker.js","webpack://LeetcodePremiumUnlocker/webpack/bootstrap","webpack://LeetcodePremiumUnlocker/webpack/runtime/compat get default export","webpack://LeetcodePremiumUnlocker/webpack/runtime/define property getters","webpack://LeetcodePremiumUnlocker/webpack/runtime/hasOwnProperty shorthand","webpack://LeetcodePremiumUnlocker/webpack/runtime/make namespace object","webpack://LeetcodePremiumUnlocker/./src/main.js"],"sourcesContent":["/*! @license DOMPurify 3.0.3 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.3/LICENSE */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.DOMPurify = factory());\n})(this, (function () { 'use strict';\n\n  const {\n    entries,\n    setPrototypeOf,\n    isFrozen,\n    getPrototypeOf,\n    getOwnPropertyDescriptor\n  } = Object;\n  let {\n    freeze,\n    seal,\n    create\n  } = Object; // eslint-disable-line import/no-mutable-exports\n\n  let {\n    apply,\n    construct\n  } = typeof Reflect !== 'undefined' && Reflect;\n\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n\n  if (!freeze) {\n    freeze = function freeze(x) {\n      return x;\n    };\n  }\n\n  if (!seal) {\n    seal = function seal(x) {\n      return x;\n    };\n  }\n\n  if (!construct) {\n    construct = function construct(Func, args) {\n      return new Func(...args);\n    };\n  }\n\n  const arrayForEach = unapply(Array.prototype.forEach);\n  const arrayPop = unapply(Array.prototype.pop);\n  const arrayPush = unapply(Array.prototype.push);\n  const stringToLowerCase = unapply(String.prototype.toLowerCase);\n  const stringToString = unapply(String.prototype.toString);\n  const stringMatch = unapply(String.prototype.match);\n  const stringReplace = unapply(String.prototype.replace);\n  const stringIndexOf = unapply(String.prototype.indexOf);\n  const stringTrim = unapply(String.prototype.trim);\n  const regExpTest = unapply(RegExp.prototype.test);\n  const typeErrorCreate = unconstruct(TypeError);\n  function unapply(func) {\n    return function (thisArg) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return apply(func, thisArg, args);\n    };\n  }\n  function unconstruct(func) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return construct(func, args);\n    };\n  }\n  /* Add properties to a lookup table */\n\n  function addToSet(set, array, transformCaseFunc) {\n    var _transformCaseFunc;\n\n    transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;\n\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n\n    let l = array.length;\n\n    while (l--) {\n      let element = array[l];\n\n      if (typeof element === 'string') {\n        const lcElement = transformCaseFunc(element);\n\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!isFrozen(array)) {\n            array[l] = lcElement;\n          }\n\n          element = lcElement;\n        }\n      }\n\n      set[element] = true;\n    }\n\n    return set;\n  }\n  /* Shallow clone an object */\n\n  function clone(object) {\n    const newObject = create(null);\n\n    for (const [property, value] of entries(object)) {\n      newObject[property] = value;\n    }\n\n    return newObject;\n  }\n  /* This method automatically checks if the prop is function\n   * or getter and behaves accordingly. */\n\n  function lookupGetter(object, prop) {\n    while (object !== null) {\n      const desc = getOwnPropertyDescriptor(object, prop);\n\n      if (desc) {\n        if (desc.get) {\n          return unapply(desc.get);\n        }\n\n        if (typeof desc.value === 'function') {\n          return unapply(desc.value);\n        }\n      }\n\n      object = getPrototypeOf(object);\n    }\n\n    function fallbackValue(element) {\n      console.warn('fallback value for', element);\n      return null;\n    }\n\n    return fallbackValue;\n  }\n\n  const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG\n\n  const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\n  const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.\n  // We still need to know them so that we can do namespace\n  // checks properly in case one wants to add them to\n  // allow-list.\n\n  const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\n  const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']); // Similarly to SVG, we want to know all MathML elements,\n  // even those that we disallow by default.\n\n  const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\n  const text = freeze(['#text']);\n\n  const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);\n  const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n  const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n  const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n  const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n\n  const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\n  const TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\n  const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n\n  const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n\n  const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  const ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n  );\n  const DOCTYPE_NAME = seal(/^html$/i);\n\n  var EXPRESSIONS = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    MUSTACHE_EXPR: MUSTACHE_EXPR,\n    ERB_EXPR: ERB_EXPR,\n    TMPLIT_EXPR: TMPLIT_EXPR,\n    DATA_ATTR: DATA_ATTR,\n    ARIA_ATTR: ARIA_ATTR,\n    IS_ALLOWED_URI: IS_ALLOWED_URI,\n    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE: ATTR_WHITESPACE,\n    DOCTYPE_NAME: DOCTYPE_NAME\n  });\n\n  const getGlobal = () => typeof window === 'undefined' ? null : window;\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n   * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n   * are not supported or creating the policy failed).\n   */\n\n\n  const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n    if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    } // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n\n\n    let suffix = null;\n    const ATTR_NAME = 'data-tt-policy-suffix';\n\n    if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n      suffix = purifyHostElement.getAttribute(ATTR_NAME);\n    }\n\n    const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML(html) {\n          return html;\n        },\n\n        createScriptURL(scriptUrl) {\n          return scriptUrl;\n        }\n\n      });\n    } catch (_) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n\n  function createDOMPurify() {\n    let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n    const DOMPurify = root => createDOMPurify(root);\n    /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */\n\n\n    DOMPurify.version = '3.0.3';\n    /**\n     * Array of elements that DOMPurify removed during sanitation.\n     * Empty if nothing was removed.\n     */\n\n    DOMPurify.removed = [];\n\n    if (!window || !window.document || window.document.nodeType !== 9) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n      return DOMPurify;\n    }\n\n    const originalDocument = window.document;\n    const currentScript = originalDocument.currentScript;\n    let {\n      document\n    } = window;\n    const {\n      DocumentFragment,\n      HTMLTemplateElement,\n      Node,\n      Element,\n      NodeFilter,\n      NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n      HTMLFormElement,\n      DOMParser,\n      trustedTypes\n    } = window;\n    const ElementPrototype = Element.prototype;\n    const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n    const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n    const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n    const getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n\n    if (typeof HTMLTemplateElement === 'function') {\n      const template = document.createElement('template');\n\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n\n    let trustedTypesPolicy;\n    let emptyHTML = '';\n    const {\n      implementation,\n      createNodeIterator,\n      createDocumentFragment,\n      getElementsByTagName\n    } = document;\n    const {\n      importNode\n    } = originalDocument;\n    let hooks = {};\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n\n    DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n    const {\n      MUSTACHE_EXPR,\n      ERB_EXPR,\n      TMPLIT_EXPR,\n      DATA_ATTR,\n      ARIA_ATTR,\n      IS_SCRIPT_OR_DATA,\n      ATTR_WHITESPACE\n    } = EXPRESSIONS;\n    let {\n      IS_ALLOWED_URI: IS_ALLOWED_URI$1\n    } = EXPRESSIONS;\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n\n    /* allowed element names */\n\n    let ALLOWED_TAGS = null;\n    const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n    /* Allowed attribute names */\n\n    let ALLOWED_ATTR = null;\n    const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n    /*\n     * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n     */\n\n    let CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false\n      }\n    }));\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n\n    let FORBID_TAGS = null;\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n\n    let FORBID_ATTR = null;\n    /* Decide if ARIA attributes are okay */\n\n    let ALLOW_ARIA_ATTR = true;\n    /* Decide if custom data attributes are okay */\n\n    let ALLOW_DATA_ATTR = true;\n    /* Decide if unknown protocols are okay */\n\n    let ALLOW_UNKNOWN_PROTOCOLS = false;\n    /* Decide if self-closing tags in attributes are allowed.\n     * Usually removed due to a mXSS issue in jQuery 3.0 */\n\n    let ALLOW_SELF_CLOSE_IN_ATTR = true;\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n\n    let SAFE_FOR_TEMPLATES = false;\n    /* Decide if document with <html>... should be returned */\n\n    let WHOLE_DOCUMENT = false;\n    /* Track whether config is already set on this instance of DOMPurify. */\n\n    let SET_CONFIG = false;\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n\n    let FORCE_BODY = false;\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n\n    let RETURN_DOM = false;\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n\n    let RETURN_DOM_FRAGMENT = false;\n    /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */\n\n    let RETURN_TRUSTED_TYPE = false;\n    /* Output should be free from DOM clobbering attacks?\n     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n     */\n\n    let SANITIZE_DOM = true;\n    /* Achieve full DOM Clobbering protection by isolating the namespace of named\n     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n     *\n     * HTML/DOM spec rules that enable DOM Clobbering:\n     *   - Named Access on Window (§7.3.3)\n     *   - DOM Tree Accessors (§3.1.5)\n     *   - Form Element Parent-Child Relations (§4.10.3)\n     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n     *   - HTMLCollection (§4.2.10.2)\n     *\n     * Namespace isolation is implemented by prefixing `id` and `name` attributes\n     * with a constant string, i.e., `user-content-`\n     */\n\n    let SANITIZE_NAMED_PROPS = false;\n    const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n    /* Keep element content when removing element? */\n\n    let KEEP_CONTENT = true;\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n\n    let IN_PLACE = false;\n    /* Allow usage of profiles like html, svg and mathMl */\n\n    let USE_PROFILES = {};\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n\n    let FORBID_CONTENTS = null;\n    const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n    /* Tags that are safe for data: URIs */\n\n    let DATA_URI_TAGS = null;\n    const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n    /* Attributes safe for values like \"javascript:\" */\n\n    let URI_SAFE_ATTRIBUTES = null;\n    const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n    const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n    const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n    const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n    /* Document namespace */\n\n    let NAMESPACE = HTML_NAMESPACE;\n    let IS_EMPTY_INPUT = false;\n    /* Allowed XHTML+XML namespaces */\n\n    let ALLOWED_NAMESPACES = null;\n    const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n    /* Parsing of strict XHTML documents */\n\n    let PARSER_MEDIA_TYPE;\n    const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n    const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n    let transformCaseFunc;\n    /* Keep a reference to config to pass to hooks */\n\n    let CONFIG = null;\n    /* Ideally, do not touch anything below this line */\n\n    /* ______________________________________________ */\n\n    const formElement = document.createElement('form');\n\n    const isRegexOrFunction = function isRegexOrFunction(testValue) {\n      return testValue instanceof RegExp || testValue instanceof Function;\n    };\n    /**\n     * _parseConfig\n     *\n     * @param  {Object} cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n\n\n    const _parseConfig = function _parseConfig(cfg) {\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n      /* Shield configuration object from tampering */\n\n\n      if (!cfg || typeof cfg !== 'object') {\n        cfg = {};\n      }\n      /* Shield configuration object from prototype pollution */\n\n\n      cfg = clone(cfg);\n      PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n\n      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n      /* Set configuration parameters */\n\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n      ALLOWED_NAMESPACES = 'ALLOWED_NAMESPACES' in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent\n      cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent\n      transformCaseFunc // eslint-disable-line indent\n      ) // eslint-disable-line indent\n      : DEFAULT_URI_SAFE_ATTRIBUTES;\n      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent\n      cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent\n      transformCaseFunc // eslint-disable-line indent\n      ) // eslint-disable-line indent\n      : DEFAULT_DATA_URI_TAGS;\n      FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n\n      ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n\n      SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n\n      IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n      CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n      }\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n      }\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n      }\n\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n      /* Parse profile info */\n\n\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, [...text]);\n        ALLOWED_ATTR = [];\n\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html$1);\n          addToSet(ALLOWED_ATTR, html);\n        }\n\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg$1);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl$1);\n          addToSet(ALLOWED_ATTR, mathMl);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n      /* Merge configuration parameters */\n\n\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n      }\n\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n      }\n\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n      }\n\n      if (cfg.FORBID_CONTENTS) {\n        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n          FORBID_CONTENTS = clone(FORBID_CONTENTS);\n        }\n\n        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n      }\n      /* Add #text in case KEEP_CONTENT is set to true */\n\n\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n\n\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n\n\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      }\n\n      if (cfg.TRUSTED_TYPES_POLICY) {\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n        }\n\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n        } // Overwrite existing TrustedTypes policy.\n\n\n        trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY; // Sign local variables required by `sanitize`.\n\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      } else {\n        // Uninitialized policy, attempt to initialize the internal dompurify policy.\n        if (trustedTypesPolicy === undefined) {\n          trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n        } // If creating the internal policy succeeded sign internal variables.\n\n\n        if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n          emptyHTML = trustedTypesPolicy.createHTML('');\n        }\n      } // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n\n\n      if (freeze) {\n        freeze(cfg);\n      }\n\n      CONFIG = cfg;\n    };\n\n    const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n    const HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML\n    // namespace. We need to specify them explicitly\n    // so that they don't get erroneously deleted from\n    // HTML namespace.\n\n    const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n    /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */\n\n    const ALL_SVG_TAGS = addToSet({}, svg$1);\n    addToSet(ALL_SVG_TAGS, svgFilters);\n    addToSet(ALL_SVG_TAGS, svgDisallowed);\n    const ALL_MATHML_TAGS = addToSet({}, mathMl$1);\n    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\n    /**\n     *\n     *\n     * @param  {Element} element a DOM element whose namespace is being checked\n     * @returns {boolean} Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */\n\n    const _checkValidNamespace = function _checkValidNamespace(element) {\n      let parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode\n      // can be null. We just simulate parent in this case.\n\n      if (!parent || !parent.tagName) {\n        parent = {\n          namespaceURI: NAMESPACE,\n          tagName: 'template'\n        };\n      }\n\n      const tagName = stringToLowerCase(element.tagName);\n      const parentTagName = stringToLowerCase(parent.tagName);\n\n      if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return false;\n      }\n\n      if (element.namespaceURI === SVG_NAMESPACE) {\n        // The only way to switch from HTML namespace to SVG\n        // is via <svg>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'svg';\n        } // The only way to switch from MathML to SVG is via`\n        // svg if parent is either <annotation-xml> or MathML\n        // text integration points.\n\n\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n        } // We only allow elements that are defined in SVG\n        // spec. All others are disallowed in SVG namespace.\n\n\n        return Boolean(ALL_SVG_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === MATHML_NAMESPACE) {\n        // The only way to switch from HTML namespace to MathML\n        // is via <math>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'math';\n        } // The only way to switch from SVG to MathML is via\n        // <math> and HTML integration points\n\n\n        if (parent.namespaceURI === SVG_NAMESPACE) {\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n        } // We only allow elements that are defined in MathML\n        // spec. All others are disallowed in MathML namespace.\n\n\n        return Boolean(ALL_MATHML_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === HTML_NAMESPACE) {\n        // The only way to switch from SVG to HTML is via\n        // HTML integration points, and from MathML to HTML\n        // is via MathML text integration points\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        } // We disallow tags that are specific for MathML\n        // or SVG and should never appear in HTML namespace\n\n\n        return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n      } // For XHTML and XML documents that support custom namespaces\n\n\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return true;\n      } // The code should never reach this place (this means\n      // that the element somehow got namespace that is not\n      // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n      // Return false just in case.\n\n\n      return false;\n    };\n    /**\n     * _forceRemove\n     *\n     * @param  {Node} node a DOM node\n     */\n\n\n    const _forceRemove = function _forceRemove(node) {\n      arrayPush(DOMPurify.removed, {\n        element: node\n      });\n\n      try {\n        // eslint-disable-next-line unicorn/prefer-dom-node-remove\n        node.parentNode.removeChild(node);\n      } catch (_) {\n        node.remove();\n      }\n    };\n    /**\n     * _removeAttribute\n     *\n     * @param  {String} name an Attribute name\n     * @param  {Node} node a DOM node\n     */\n\n\n    const _removeAttribute = function _removeAttribute(name, node) {\n      try {\n        arrayPush(DOMPurify.removed, {\n          attribute: node.getAttributeNode(name),\n          from: node\n        });\n      } catch (_) {\n        arrayPush(DOMPurify.removed, {\n          attribute: null,\n          from: node\n        });\n      }\n\n      node.removeAttribute(name); // We void attribute values for unremovable \"is\"\" attributes\n\n      if (name === 'is' && !ALLOWED_ATTR[name]) {\n        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n          try {\n            _forceRemove(node);\n          } catch (_) {}\n        } else {\n          try {\n            node.setAttribute(name, '');\n          } catch (_) {}\n        }\n      }\n    };\n    /**\n     * _initDocument\n     *\n     * @param  {String} dirty a string of dirty markup\n     * @return {Document} a DOM, filled with the dirty markup\n     */\n\n\n    const _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      let doc;\n      let leadingWhitespace;\n\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n        leadingWhitespace = matches && matches[0];\n      }\n\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n        dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n      }\n\n      const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */\n\n      if (NAMESPACE === HTML_NAMESPACE) {\n        try {\n          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n        } catch (_) {}\n      }\n      /* Use createHTMLDocument in case DOMParser is not available */\n\n\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createDocument(NAMESPACE, 'template', null);\n\n        try {\n          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n        } catch (_) {// Syntax error if dirtyPayload is invalid xml\n        }\n      }\n\n      const body = doc.body || doc.documentElement;\n\n      if (dirty && leadingWhitespace) {\n        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n      }\n      /* Work on whole document or just its body */\n\n\n      if (NAMESPACE === HTML_NAMESPACE) {\n        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n      }\n\n      return WHOLE_DOCUMENT ? doc.documentElement : body;\n    };\n    /**\n     * _createIterator\n     *\n     * @param  {Document} root document/fragment to create iterator for\n     * @return {Iterator} iterator instance\n     */\n\n\n    const _createIterator = function _createIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);\n    };\n    /**\n     * _isClobbered\n     *\n     * @param  {Node} elm element to check for clobbering attacks\n     * @return {Boolean} true if clobbered, false if safe\n     */\n\n\n    const _isClobbered = function _isClobbered(elm) {\n      return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');\n    };\n    /**\n     * _isNode\n     *\n     * @param  {Node} obj object to check whether it's a DOM node\n     * @return {Boolean} true is object is a DOM node\n     */\n\n\n    const _isNode = function _isNode(object) {\n      return typeof Node === 'object' ? object instanceof Node : object && typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';\n    };\n    /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode node to work on with the hook\n     * @param  {Object} data additional hook parameters\n     */\n\n\n    const _executeHook = function _executeHook(entryPoint, currentNode, data) {\n      if (!hooks[entryPoint]) {\n        return;\n      }\n\n      arrayForEach(hooks[entryPoint], hook => {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    };\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   {Node} currentNode to check for permission to exist\n     * @return  {Boolean} true if node was killed, false if left alive\n     */\n\n\n    const _sanitizeElements = function _sanitizeElements(currentNode) {\n      let content;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeElements', currentNode, null);\n      /* Check if element is clobbered or can clobber */\n\n\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Now let's check the element's type and name */\n\n\n      const tagName = transformCaseFunc(currentNode.nodeName);\n      /* Execute a hook if present */\n\n      _executeHook('uponSanitizeElement', currentNode, {\n        tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n      /* Detect mXSS attempts abusing namespace confusion */\n\n\n      if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Remove element if anything forbids its presence */\n\n\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Check if we have a custom element to handle */\n        if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;\n        }\n        /* Keep content except for bad-listed elements */\n\n\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n          const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n          const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n          if (childNodes && parentNode) {\n            const childCount = childNodes.length;\n\n            for (let i = childCount - 1; i >= 0; --i) {\n              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));\n            }\n          }\n        }\n\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Check whether element has a valid namespace */\n\n\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Make sure that older browsers don't get noscript mXSS */\n\n\n      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\\/no(script|embed)/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Sanitize element content to be template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        content = stringReplace(content, MUSTACHE_EXPR, ' ');\n        content = stringReplace(content, ERB_EXPR, ' ');\n        content = stringReplace(content, TMPLIT_EXPR, ' ');\n\n        if (currentNode.textContent !== content) {\n          arrayPush(DOMPurify.removed, {\n            element: currentNode.cloneNode()\n          });\n          currentNode.textContent = content;\n        }\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeElements', currentNode, null);\n\n      return false;\n    };\n    /**\n     * _isValidAttribute\n     *\n     * @param  {string} lcTag Lowercase tag name of containing element.\n     * @param  {string} lcName Lowercase attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n\n\n    const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n\n\n      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n          return false;\n        }\n        /* Check value is safe. First, is attr inert? If so, is safe */\n\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n        return false;\n      } else ;\n\n      return true;\n    };\n    /**\n     * _basicCustomElementCheck\n     * checks if at least one dash is included in tagName, and it's not the first char\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n     * @param {string} tagName name of the tag of the node to sanitize\n     */\n\n\n    const _basicCustomElementTest = function _basicCustomElementTest(tagName) {\n      return tagName.indexOf('-') > 0;\n    };\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param  {Node} currentNode to sanitize\n     */\n\n\n    const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      let attr;\n      let value;\n      let lcName;\n      let l;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n      const {\n        attributes\n      } = currentNode;\n      /* Check if we have attributes; if not we might have a text node */\n\n      if (!attributes) {\n        return;\n      }\n\n      const hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR\n      };\n      l = attributes.length;\n      /* Go backwards over all attributes; safely remove bad ones */\n\n      while (l--) {\n        attr = attributes[l];\n        const {\n          name,\n          namespaceURI\n        } = attr;\n        value = name === 'value' ? attr.value : stringTrim(attr.value);\n        lcName = transformCaseFunc(name);\n        /* Execute a hook if present */\n\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n\n        value = hookEvent.attrValue;\n        /* Did the hooks approve of the attribute? */\n\n        if (hookEvent.forceKeepAttr) {\n          continue;\n        }\n        /* Remove attribute */\n\n\n        _removeAttribute(name, currentNode);\n        /* Did the hooks approve of the attribute? */\n\n\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n        /* Work around a security issue in jQuery 3.0 */\n\n\n        if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n          _removeAttribute(name, currentNode);\n\n          continue;\n        }\n        /* Sanitize attribute content to be template-safe */\n\n\n        if (SAFE_FOR_TEMPLATES) {\n          value = stringReplace(value, MUSTACHE_EXPR, ' ');\n          value = stringReplace(value, ERB_EXPR, ' ');\n          value = stringReplace(value, TMPLIT_EXPR, ' ');\n        }\n        /* Is `value` valid for this attribute? */\n\n\n        const lcTag = transformCaseFunc(currentNode.nodeName);\n\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n        /* Full DOM Clobbering protection via namespace isolation,\n         * Prefix id and name attributes with `user-content-`\n         */\n\n\n        if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n          // Remove the attribute with this value\n          _removeAttribute(name, currentNode); // Prefix the value and later re-create the attribute with the sanitized value\n\n\n          value = SANITIZE_NAMED_PROPS_PREFIX + value;\n        }\n        /* Handle attributes that require Trusted Types */\n\n\n        if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n          if (namespaceURI) ; else {\n            switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n              case 'TrustedHTML':\n                {\n                  value = trustedTypesPolicy.createHTML(value);\n                  break;\n                }\n\n              case 'TrustedScriptURL':\n                {\n                  value = trustedTypesPolicy.createScriptURL(value);\n                  break;\n                }\n            }\n          }\n        }\n        /* Handle invalid data-* attribute set by try-catching it */\n\n\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n\n          arrayPop(DOMPurify.removed);\n        } catch (_) {}\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeAttributes', currentNode, null);\n    };\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param  {DocumentFragment} fragment to iterate over recursively\n     */\n\n\n    const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      let shadowNode;\n\n      const shadowIterator = _createIterator(fragment);\n      /* Execute a hook if present */\n\n\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(shadowNode)) {\n          continue;\n        }\n        /* Deep shadow DOM detected */\n\n\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(shadowNode);\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\n    };\n    /**\n     * Sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String|Node} dirty string or DOM node\n     * @param {Object} configuration object\n     */\n    // eslint-disable-next-line complexity\n\n\n    DOMPurify.sanitize = function (dirty) {\n      let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let body;\n      let importedNode;\n      let currentNode;\n      let returnNode;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n\n      IS_EMPTY_INPUT = !dirty;\n\n      if (IS_EMPTY_INPUT) {\n        dirty = '<!-->';\n      }\n      /* Stringify, in case dirty is an object */\n\n\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        if (typeof dirty.toString === 'function') {\n          dirty = dirty.toString();\n\n          if (typeof dirty !== 'string') {\n            throw typeErrorCreate('dirty is not a string, aborting');\n          }\n        } else {\n          throw typeErrorCreate('toString is not a function');\n        }\n      }\n      /* Return dirty HTML if DOMPurify cannot run */\n\n\n      if (!DOMPurify.isSupported) {\n        return dirty;\n      }\n      /* Assign config vars */\n\n\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n      /* Clean up removed elements */\n\n\n      DOMPurify.removed = [];\n      /* Check if dirty is correctly typed for IN_PLACE */\n\n      if (typeof dirty === 'string') {\n        IN_PLACE = false;\n      }\n\n      if (IN_PLACE) {\n        /* Do some early pre-sanitization to avoid unsafe root nodes */\n        if (dirty.nodeName) {\n          const tagName = transformCaseFunc(dirty.nodeName);\n\n          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n            throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n          }\n        }\n      } else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!---->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n        /* Initialize the document to work on */\n\n\n        body = _initDocument(dirty);\n        /* Check we have a DOM node from the data */\n\n        if (!body) {\n          return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n        }\n      }\n      /* Remove first element node (ours) if FORCE_BODY is set */\n\n\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n      /* Get node iterator */\n\n\n      const nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n      /* Now start iterating over the created document */\n\n\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Sanitize tags and elements */\n        if (_sanitizeElements(currentNode)) {\n          continue;\n        }\n        /* Shadow DOM detected, sanitize it */\n\n\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(currentNode);\n      }\n      /* If we sanitized `dirty` in-place, return it. */\n\n\n      if (IN_PLACE) {\n        return dirty;\n      }\n      /* Return sanitized string or DOM */\n\n\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-dom-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n\n        if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmod) {\n          /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n\n        return returnNode;\n      }\n\n      let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n      /* Serialize doctype if allowed */\n\n      if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n        serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n      }\n      /* Sanitize final string template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES) {\n        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR, ' ');\n        serializedHTML = stringReplace(serializedHTML, ERB_EXPR, ' ');\n        serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR, ' ');\n      }\n\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n    /**\n     * Public method to set the configuration once\n     * setConfig\n     *\n     * @param {Object} cfg configuration object\n     */\n\n\n    DOMPurify.setConfig = function (cfg) {\n      _parseConfig(cfg);\n\n      SET_CONFIG = true;\n    };\n    /**\n     * Public method to remove the configuration\n     * clearConfig\n     *\n     */\n\n\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n    /**\n     * Public method to check if an attribute value is valid.\n     * Uses last set config, if any. Otherwise, uses config defaults.\n     * isValidAttribute\n     *\n     * @param  {string} tag Tag name of containing element.\n     * @param  {string} attr Attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n     */\n\n\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n\n      const lcTag = transformCaseFunc(tag);\n      const lcName = transformCaseFunc(attr);\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n    /**\n     * AddHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint entry point for the hook to add\n     * @param {Function} hookFunction function to execute\n     */\n\n\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n\n      hooks[entryPoint] = hooks[entryPoint] || [];\n      arrayPush(hooks[entryPoint], hookFunction);\n    };\n    /**\n     * RemoveHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint entry point for the hook to remove\n     * @return {Function} removed(popped) hook\n     */\n\n\n    DOMPurify.removeHook = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        return arrayPop(hooks[entryPoint]);\n      }\n    };\n    /**\n     * RemoveHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint entry point for the hooks to remove\n     */\n\n\n    DOMPurify.removeHooks = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        hooks[entryPoint] = [];\n      }\n    };\n    /**\n     * RemoveAllHooks\n     * Public method to remove all DOMPurify hooks\n     *\n     */\n\n\n    DOMPurify.removeAllHooks = function () {\n      hooks = {};\n    };\n\n    return DOMPurify;\n  }\n\n  var purify = createDOMPurify();\n\n  return purify;\n\n}));\n//# sourceMappingURL=purify.js.map\n","\r\n\r\nclass FirebaseAnalyticsManager{  \r\n    constructor( ){ \r\n        if(FirebaseAnalyticsManager._instance) { \r\n            throw new Error(\"Firebase Analytics Manager Have been instantiated\")\r\n        }\r\n        this.GA_ENDPOINT = 'https://www.google-analytics.com/mp/collect';\r\n        this.MEASUREMENT_ID = `G-CLFR1EQEHX`;\r\n        this.API_SECRET = `1S-gP2C3SvmIOe93kgGEQg`;\r\n        this.SESSION_EXPIRATION_IN_MIN = 30;\r\n        this.enableAnalytics = false; \r\n    }\r\n\r\n    async getOrCreateClientId() {\r\n        if(!this.enableAnalytics) return;\r\n        const result = await chrome.storage.local.get('clientId');\r\n        let clientId = result.clientId;\r\n        if (!clientId) {\r\n          clientId = self.crypto.randomUUID();\r\n          await chrome.storage.local.set({clientId});\r\n        }\r\n        return clientId;\r\n    }\r\n\r\n    async fireModifiedButtonClickedEvent(id, buttonType, buttonName) {\r\n        if(!this.enableAnalytics) return;\r\n        fetch(\r\n            `${this.GA_ENDPOINT}?measurement_id=${this.MEASUREMENT_ID}&api_secret=${this.API_SECRET}`,\r\n            {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                client_id: await this.getOrCreateClientId(), \r\n                events: [\r\n                    {\r\n                    name: 'button_clicked',\r\n                    params: {\r\n                        id: id,\r\n                        type:buttonType, \r\n                        name: buttonName\r\n                    },\r\n                    },\r\n                ],\r\n                }),\r\n            }\r\n            );\r\n    }\r\n\r\n\r\n    async fireUnlockedDataEvent(dataType) { \r\n        if(!this.enableAnalytics) return;\r\n        fetch(\r\n            `${this.GA_ENDPOINT}?measurement_id=${this.MEASUREMENT_ID}&api_secret=${this.API_SECRET}`,\r\n            {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                client_id: await this.getOrCreateClientId(), \r\n                events: [\r\n                    {\r\n                    name: 'data_unlocked',\r\n                    params: {\r\n                        type: dataType\r\n                    },  \r\n                    },\r\n                ],\r\n                }),\r\n            }\r\n            );\r\n    }\r\n\r\n    async fireErrorEvent(url, error, unlocker){ \r\n        if(!this.enableAnalytics) return;\r\n        fetch(\r\n            `${this.GA_ENDPOINT}?measurement_id=${this.MEASUREMENT_ID}&api_secret=${this.API_SECRET}`,\r\n            {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                client_id: await this.getOrCreateClientId(), \r\n                events: [\r\n                    {\r\n                    name: 'unlock_error',\r\n                    params: {\r\n                        error_type: error, \r\n                        url: url, \r\n                        unlocker_name : unlocker\r\n                    },  \r\n                    },\r\n                ],\r\n                }),\r\n            }\r\n            );\r\n    }\r\n}   \r\n\r\n\r\n\r\n\r\n\r\n\r\nlet analyticsManager = new FirebaseAnalyticsManager() \r\nexport{ analyticsManager}","import { GoogleSheetsAPIManager, GoogleSheetsProblemTableDataFetcher } from \"../DataFetcher/GoogleSheetsDataFetcher\";\r\n\r\n\r\nfunction getBrowser() { \r\n    if (typeof browser === 'undefined') return chrome\r\n    return browser\r\n}\r\n\r\nclass GoogleSheetBufferManager { \r\n    constructor() { \r\n        this.cachedData = {}\r\n        this.browser = getBrowser(); \r\n    }\r\n\r\n    refreshTableData() { \r\n        let savedData = {\"FetchDate\": Date.now()}\r\n        let dataFetcher = new GoogleSheetsProblemTableDataFetcher(); \r\n        return dataFetcher.fetchData()\r\n        .then(data=> savedData[\"data\"] = data)\r\n        .then(data => this.onDataFetched(savedData))\r\n    }\r\n\r\n    onDataFetched(savedData) {\r\n        let rowOffsetData = this.parseRowOffsetData(savedData[\"data\"]) \r\n        this.browser.storage.local.set({\"rowOffset\":rowOffsetData})\r\n        this.browser.storage.local.set({\"TableFrequencyData\":savedData})\r\n    }\r\n\r\n    getRowOffsetData() { \r\n        return this.browser.storage.local.get(\"rowOffset\")\r\n    }\r\n\r\n    parseRowOffsetData(data) {\r\n        let rowOffsetData = {}\r\n        let i = 2\r\n        // {ProblemID: Row}\r\n        for(let key in data) { \r\n            rowOffsetData[key] = i \r\n            i +=1 \r\n        }\r\n        return rowOffsetData; \r\n    }\r\n\r\n    getBufferedData(key) {\r\n        return this.browser.storage.local.get(key)\r\n    }\r\n}\r\n\r\nexport { GoogleSheetBufferManager}","import { CSSStyler } from \"./Objects\"\r\n\r\n\r\nclass ModalManager{ \r\n    constructor() { \r\n        if(ModalManager._instance) { \r\n            throw new Error(\"Modal Manager Have been instantiated\")\r\n        }\r\n        ModalManager._instance = this\r\n        this.modal = this.createModal()\r\n        this.modalContentBox = this.createModalContentBox()\r\n        this.appendToModal(this.modalContentBox)\r\n        this.appendModal(document.body)\r\n    }\r\n\r\n    createModalContentBox() {\r\n        let modalContentBox = document.createElement('div')\r\n        modalContentBox.style = `\r\n        background-color: ${CSSStyler.getContainerBackgroundColor()};\r\n        margin-top:1%; \r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        padding: 20px;\r\n        max-width: 80%;\r\n        min-width: 60%\r\n        mid-height: 15%; \r\n        border-radius:15px; \r\n        `\r\n        return modalContentBox\r\n    }\r\n\r\n    getModalContentBox() { \r\n        return this.modalContentBox\r\n    }\r\n\r\n    appendModal(targetParent) {\r\n        targetParent.appendChild(this.modal)\r\n    }\r\n\r\n    appendToModal(targetElement) { \r\n        this.modal.appendChild(targetElement)\r\n    } \r\n    \r\n    appendToContainer(targetElement) { \r\n        this.modalContentBox.appendChild(targetElement)\r\n    }\r\n\r\n    showLoadingIcon() { \r\n        let loadingDiv = document.createElement('div')\r\n        loadingDiv.classList.add('loading-logo')\r\n        this.modalContentBox.appendChild(loadingDiv)\r\n    }\r\n\r\n    createCloseButton() { \r\n        let closeButton = document.createElement('span')\r\n        closeButton.style = ` \r\n        float: right;\r\n        font-size: 28px;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n        `\r\n\r\n        closeButton.innerText = \"x\"\r\n        closeButton.addEventListener('click', resetModal)\r\n        return closeButton\r\n    }\r\n\r\n    createModal() { \r\n        let modal = document.createElement('div')\r\n        modal.style = ` \r\n        display: none; \r\n        position: fixed; \r\n        z-index: 32;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%; \r\n        height: 100%; \r\n        overflow: auto; \r\n        `\r\n        window.addEventListener('click', this.onModalClicked)\r\n        modal.id = \"CompanyModal\"\r\n        return modal\r\n    }\r\n\r\n    openModal() { \r\n        this.modal.style.display = \"\"\r\n    }\r\n\r\n    closeModal() { \r\n        this.modal.style.display = \"none\"\r\n    }\r\n\r\n    clearModalContent() { \r\n        while(this.modalContentBox.firstChild != undefined) { \r\n            this.modalContentBox.firstChild.remove()\r\n        }\r\n    }\r\n\r\n    onModalClicked = (event) =>  { \r\n        if (event.target == this.modal) {\r\n            this.resetModal()\r\n        }\r\n    } \r\n\r\n    resetModal = () => {  \r\n        this.closeModal()\r\n        this.clearModalContent()\r\n    }\r\n}\r\n\r\nlet modalManager = new ModalManager()\r\n\r\nexport {modalManager}","import { getRateUsElement } from \"../ElementGenerator/ElementHelperClass\"\r\nimport { TagsElementGenerator } from \"../ElementGenerator/TagContentElementGenerator\"\r\n\r\n\r\nclass EditorialContentBuilder{ \r\n    constructor() { \r\n        this.parentDiv = document.createElement('div')\r\n    }\r\n\r\n    buildContent(innerHTML) { \r\n        let row = document.createElement('div')\r\n        row.style.justifyContent = 'center'\r\n        row.innerHTML = innerHTML\r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }\r\n\r\n    getResult() { \r\n        return this.parentDiv\r\n    }\r\n    \r\n    buildRateUsText() { \r\n        let row = TagsElementGenerator.generateRow()\r\n        row.style.justifyContent = 'center'\r\n        row.appendChild(getRateUsElement())\r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {EditorialContentBuilder}","\r\nimport {AcceptanceSorter, DifficultySorter, NameSorter, IDSorter, FrequencySorter} from \"../ProblemSorter\"\r\nimport { TableElementGenerator } from \"../ElementGenerator/TableContentElementGenerator\"\r\nimport { getRateUsElement } from \"../ElementGenerator/ElementHelperClass\"\r\n\r\nclass TableContentBuilder{ \r\n    constructor() {\r\n        this.tableId = \"table-content\"\r\n        this.shownData = []\r\n        this.currentlySortedBy = \"\"\r\n        this.isReverseSorted = false\r\n        this.parentDiv = document.createElement('div')\r\n        this.durationData = {}\r\n        this.currentlySelectedDuration = undefined\r\n    } \r\n\r\n    setShownData(data) { \r\n        this.shownData = data\r\n        return this\r\n    }\r\n\r\n    buildRateUsRow() { \r\n        let row = TableElementGenerator.generateRowElement()\r\n        row.style.justifyContent = \"center\";\r\n        row.appendChild(getRateUsElement())\r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }\r\n\r\n    buildTitleRow(title) {\r\n        let row =  TableElementGenerator.generateRowElement()\r\n        row.style.justifyContent = \"center\"; \r\n        row.appendChild(TableElementGenerator.generateTitleElement(title))\r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }\r\n\r\n    addDurationData(duration, data) { \r\n        this.durationData[duration] = data\r\n    }\r\n\r\n    buildDurationsRow() { \r\n        let row =  TableElementGenerator.generateRowElement()\r\n        for(let duration in this.durationData) { \r\n            let element = TableElementGenerator.generateDurationElement(duration)\r\n            element.classList.add(\"clickable\")\r\n            element.addEventListener('click', this.onDurationButtonClicked)\r\n            row.appendChild(element)\r\n            if(this.currentlySelectedDuration == undefined) {\r\n                this.currentlySelectedDuration = element\r\n                let selectEvent = new Event('select');\r\n                this.currentlySelectedDuration.dispatchEvent(selectEvent)\r\n            } \r\n        }  \r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }\r\n\r\n    buildHeaderRow() { \r\n        let row = TableElementGenerator.generateRowElement()\r\n        let idHeaderCell = TableElementGenerator.generateProblemIdElement(\"#\")\r\n        let titleHeaderCell = TableElementGenerator.generateProblemNameElement(\"Title\", \"javascript:void(0)\")\r\n        let acceptanceHeaderCell= TableElementGenerator.generateProblemAcceptanceElement(\"Acceptance\")\r\n        let difficultyHeaderCell= TableElementGenerator.generateProblemDifficultyElement(\"Difficulty\")\r\n        let frequencyHeaderCell= TableElementGenerator.generateProblemAcceptanceElement(\"Frequency\")\r\n     \r\n        idHeaderCell.firstChild.classList.add(\"clickable\")\r\n        titleHeaderCell.firstChild.classList.add(\"clickable\")\r\n        acceptanceHeaderCell.firstChild.classList.add(\"clickable\")\r\n        difficultyHeaderCell.firstChild.classList.add(\"clickable\")\r\n        frequencyHeaderCell.firstChild.classList.add(\"clickable\")\r\n\r\n        idHeaderCell.firstChild.classList.add(\"default-text-color\")\r\n        titleHeaderCell.firstChild.classList.add(\"default-text-color\")\r\n        acceptanceHeaderCell.firstChild.classList.add(\"default-text-color\")\r\n        difficultyHeaderCell.firstChild.classList.add(\"default-text-color\")\r\n        frequencyHeaderCell.firstChild.classList.add(\"default-text-color\")\r\n\r\n        idHeaderCell.addEventListener('click', this.getOnHeaderClickedFunction(IDSorter).bind(this))\r\n        titleHeaderCell.addEventListener('click', this.getOnHeaderClickedFunction(NameSorter).bind(this))\r\n        acceptanceHeaderCell.addEventListener('click', this.getOnHeaderClickedFunction(AcceptanceSorter).bind(this))\r\n        difficultyHeaderCell.addEventListener('click', this.getOnHeaderClickedFunction(DifficultySorter).bind(this))\r\n        frequencyHeaderCell.addEventListener('click', this.getOnHeaderClickedFunction(FrequencySorter).bind(this))\r\n\r\n        row.appendChild(idHeaderCell)\r\n        row.appendChild(titleHeaderCell)\r\n        row.appendChild(acceptanceHeaderCell)\r\n        row.appendChild(difficultyHeaderCell)\r\n        row.appendChild(frequencyHeaderCell)\r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }\r\n\r\n    buildTable(Sortby = NameSorter) { \r\n        this.shownData.sort(Sortby)\r\n        this.currentlySortedBy = Sortby.name\r\n        this.isReverseSorted = false\r\n        let table = TableElementGenerator.generateTableContentElement(this.shownData)\r\n        this.parentDiv.appendChild(table)\r\n        return this\r\n    }\r\n\r\n    getResult() {\r\n        return this.parentDiv\r\n    }\r\n\r\n    \r\n    onDurationButtonClicked = (event) => {\r\n        let selectEvent = new Event('select');\r\n        event.currentTarget.dispatchEvent(selectEvent)\r\n        let unselectEvent = new Event('unselect');\r\n        this.currentlySelectedDuration.dispatchEvent(unselectEvent)\r\n        this.currentlySelectedDuration = event.currentTarget\r\n\r\n        this.shownData = this.durationData[event.currentTarget.getAttribute(\"duration\")]\r\n        this.swapContentTableElement(this.shownData)\r\n    }\r\n\r\n    getOnHeaderClickedFunction(Sorter) { \r\n        return () => {  \r\n            if(Sorter.name == this.currentlySortedBy) { \r\n                this.shownData.sort(Sorter, !this.isReverseSorted)    \r\n                this.isReverseSorted = !this.isReverseSorted\r\n            } else { \r\n                this.shownData.sort(Sorter)\r\n                this.currentlySortedBy = Sorter.name\r\n                this.isReverseSorted = false\r\n            }\r\n            this.swapContentTableElement(this.shownData)\r\n        }\r\n    }\r\n\r\n    swapContentTableElement = (swapTo) => {\r\n        if(document.getElementById(this.tableId) != undefined) document.getElementById(this.tableId).remove() \r\n        let table = TableElementGenerator.generateTableContentElement(swapTo)\r\n        this.parentDiv.appendChild(table)\r\n    }\r\n}\r\n\r\nexport {TableContentBuilder}","\r\nimport { getRateUsElement } from \"../ElementGenerator/ElementHelperClass\"\r\nimport { TagsElementGenerator } from \"../ElementGenerator/TagContentElementGenerator\"\r\n\r\n\r\nclass TagsContentBuilder{ \r\n    constructor() { \r\n        this.parentDiv = document.createElement('div')\r\n    }\r\n\r\n    buildHeader(headerName) {\r\n        let row = TagsElementGenerator.generateRow()\r\n        row.style.justifyContent = 'center'\r\n        row.appendChild(TagsElementGenerator.generateHeader(headerName))\r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }   \r\n\r\n    getResult() { \r\n        return this.parentDiv\r\n    }\r\n\r\n    buildTagsBox(tags) { \r\n        let row = TagsElementGenerator.generateRow()\r\n        for(let i =0; i <= tags.length -1; i ++) {\r\n            let tag = TagsElementGenerator.generateTag(tags[i].company)\r\n            row.appendChild(tag)\r\n        }\r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }\r\n\r\n    buildRateUsText() { \r\n        let row = TagsElementGenerator.generateRow()\r\n        row.style.justifyContent = 'center'\r\n        row.appendChild(getRateUsElement())\r\n        this.parentDiv.appendChild(row)\r\n        return this\r\n    }\r\n}\r\n\r\n\r\nexport {TagsContentBuilder}","import {\r\n  ProblemInfo,\r\n  ProblemInfoList,\r\n  CompanyProblemInfo,\r\n  CompanyProblemInfoList,\r\n  ProblemArray,\r\n  ProblemT,\r\n  ProblemTag,\r\n} from \"../Objects\";\r\n\r\nclass GoogleSheetsAPIManager {\r\n  static API_KEY = \"AIzaSyDjflVmCmGJRzGhtV9MVynrOo3OHn5ptto\"; // updated\r\n  static SHEETS_ID = \"13qPJ_Q4KsQZwTgTnq7BlRb4hyK4yIF_PQBjGhnHOJcU\";\r\n  static TESTING_SHEETS_ID = \"13qPJ_Q4KsQZwTgTnq7BlRb4hyK4yIF_PQBjGhnHOJcU\";\r\n\r\n  // +class GoogleSheetsAPIManager {\r\n  // +  static API_KEY = \"AIzaSyDjflVmCmGJRzGhtV9MVynrOo3OHn5ptto\"; // updated\r\n  // +  static SHEETS_ID = \"13qPJ_Q4KsQZwTgTnq7BlRb4hyK4yIF_PQBjGhnHOJcU\";\r\n  // +  static TESTING_SHEETS_ID = \"13qPJ_Q4KsQZwTgTnq7BlRb4hyK4yIF_PQBjGhnHOJcU\";\r\n\r\n  static getUrl(range) {\r\n    return `https://sheets.googleapis.com/v4/spreadsheets/${GoogleSheetsAPIManager.SHEETS_ID}/values/${range}?key=${GoogleSheetsAPIManager.API_KEY}`;\r\n  }\r\n}\r\n\r\nclass GoogleSheetsProblemTableDataFetcher {\r\n  constructor() {\r\n    this.cachedData = {};\r\n  }\r\n\r\n  fetchData() {\r\n    return this.fetchProblemFrequencyData();\r\n  }\r\n\r\n  async fetchProblemFrequencyData() {\r\n    let range = \"Problem!A:B\";\r\n    let url = GoogleSheetsAPIManager.getUrl(range);\r\n    let response = await fetch(url);\r\n    let data = await response.json();\r\n    console.log(\"data fetched \", data);\r\n    \r\n    let parsedData = this.parseProblemFrequencyData(data[\"values\"]);\r\n    return parsedData;\r\n  }\r\n\r\n  parseProblemFrequencyData(data) {\r\n    let returnData = {};\r\n    for (let i = 0; i <= data.length - 1; i++) {\r\n      let id = data[i][0];\r\n      let frequency = data[i][1];\r\n      returnData[id] = frequency;\r\n      this.cachedData[id] = i + 1;\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  fetchPremiumProblem(problemId) {\r\n    return this.fetchProblemData(problemId);\r\n  }\r\n\r\n  async fetchProblemData(problemId) {\r\n    if (problemId in this.cachedData == false)\r\n      return new Promise((resolve, reject) => resolve(\"<h1>No data</h1>\"));\r\n    let row = this.cachedData[problemId];\r\n    let range = \"Problem!K\" + row;\r\n    let url = GoogleSheetsAPIManager.getUrl(range);\r\n    let response = await fetch(url);\r\n    let data = await response.json();\r\n    return data[\"values\"][0];\r\n  }\r\n\r\n  static async fetchProblemDataByRow(row) {\r\n    let range = \"Problem!K\" + row;\r\n    let url = GoogleSheetsAPIManager.getUrl(range);\r\n    let response = await fetch(url);\r\n    let data = await response.json();\r\n    return data[\"values\"][0][0];\r\n  }\r\n}\r\n\r\nclass GoogleSheetsCompanyProblemDataFetcher {\r\n  constructor() {\r\n    this.companyPageTableData = {};\r\n    this.cachedData = {};\r\n    this.tableDataFetched = false;\r\n    // this.fetchCompanyPageTable() //cache company map data\r\n  }\r\n\r\n  fetchData(companyName) {\r\n    if (this.tableDataFetched == false) {\r\n      return this.fetchCompanyPageTable().then((data) =>\r\n        this.fetchCompanyProblemData(companyName)\r\n      );\r\n    }\r\n    return this.fetchCompanyProblemData(companyName);\r\n  }\r\n\r\n  fetchCompanyPageTable() {\r\n    let range = \"CompaniesProblem_Map!A:C\";\r\n    let url = GoogleSheetsAPIManager.getUrl(range);\r\n    return fetch(url)\r\n      .then((data) => data.json())\r\n      .then((data) => {\r\n        this.parseCompanyPageTableData(data[\"values\"]);\r\n      })\r\n      .then((this.tableDataFetched = true));\r\n  }\r\n\r\n  fetchCompanyProblemData(companyName) {\r\n    if (companyName in this.cachedData) {\r\n      return new Promise((resolve, reject) =>\r\n        resolve(this.cachedData[companyName])\r\n      );\r\n    }\r\n    if (companyName in this.companyPageTableData == false) {\r\n      return new Promise((resolve, reject) =>\r\n        resolve(new CompanyProblemInfoList())\r\n      );\r\n    }\r\n    let startRow = this.companyPageTableData[companyName][0];\r\n    let endRow = this.companyPageTableData[companyName][1];\r\n    let companyDataSheetName = \"CompaniesProblem\";\r\n    let range = `${companyDataSheetName}!A${startRow}:I${endRow}`;\r\n    let url = GoogleSheetsAPIManager.getUrl(range);\r\n    return fetch(url)\r\n      .then((data) => data.json())\r\n      .then((data) =>\r\n        this.parseCompanyProblemData(companyName, data[\"values\"])\r\n      );\r\n  }\r\n\r\n  parseCompanyPageTableData(data) {\r\n    for (let i = 1; i <= data.length - 1; i++) {\r\n      let companyName = data[i][0];\r\n      let starRow = data[i][1];\r\n      let endRow = data[i][2];\r\n      this.companyPageTableData[companyName] = [starRow, endRow];\r\n    }\r\n    return this.companyPageTableData;\r\n  }\r\n\r\n  parseCompanyProblemData(companyName, data) {\r\n    let companyProblemInfoList = new CompanyProblemInfoList();\r\n    for (let i = 0; i <= data.length - 1; i++) {\r\n      let frequency = data[i][2];\r\n      let id = data[i][1];\r\n      let difficulty = data[i][7];\r\n      let problemUrl = data[i][6];\r\n      let problemName = data[i][4];\r\n      let acceptance = data[i][5];\r\n      let companyName = data[i][0];\r\n      let duration = data[i][3];\r\n      let problemInfo = new CompanyProblemInfo(\r\n        frequency,\r\n        id,\r\n        difficulty,\r\n        problemUrl,\r\n        problemName,\r\n        acceptance,\r\n        companyName,\r\n        duration\r\n      );\r\n      companyProblemInfoList.push(duration, problemInfo);\r\n    }\r\n    this.cachedData[companyName] = companyProblemInfoList;\r\n    return companyProblemInfoList;\r\n  }\r\n}\r\n\r\nclass GoogleSheetsTopProblemDataFetcher {\r\n  fetchData(itemName) {\r\n    let range = `${itemName}!A2:F`;\r\n    let url = GoogleSheetsAPIManager.getUrl(range);\r\n    return fetch(url)\r\n      .then((data) => data.json())\r\n      .then((data) => this.parseTopQuestionData(data[\"values\"]));\r\n  }\r\n\r\n  parseTopQuestionData(data) {\r\n    let problemInfoList = new ProblemArray();\r\n    for (let i = 0; i <= data.length - 1; i++) {\r\n      let id = data[i][0];\r\n      let freq = data[i][1];\r\n      let name = data[i][2];\r\n      let acceptance = data[i][3];\r\n      let url = data[i][4];\r\n      let difficulty = data[i][5];\r\n      let problemInfo = new ProblemInfo(\r\n        freq,\r\n        id,\r\n        difficulty,\r\n        url,\r\n        name,\r\n        acceptance\r\n      );\r\n      problemInfoList.push(problemInfo);\r\n    }\r\n    return problemInfoList;\r\n  }\r\n}\r\n\r\nclass GoogleSheetsProblemTagsDataFetcher {\r\n  constructor() {\r\n    this.map = {};\r\n    this.mapFetched = false;\r\n    // this.fetchtProblemTagsMap()\r\n  }\r\n\r\n  fetchData(url) {\r\n    if (this.mapFetched) return this.fetchProblemTag(url);\r\n    return this.fetchtProblemTagsMap().then((data) =>\r\n      this.fetchProblemTag(url)\r\n    );\r\n  }\r\n\r\n  fetchProblemTag(url) {\r\n    if (!(url in this.map)) {\r\n      return new Promise((resolve, reject) => resolve(new ProblemInfoList()));\r\n    }\r\n    let startRow = this.map[url][0];\r\n    let endRow = this.map[url][1];\r\n    let range = `ProblemCompaniesTags!A${startRow}:C${endRow}`;\r\n    let fetchUrl = GoogleSheetsAPIManager.getUrl(range);\r\n    return fetch(fetchUrl)\r\n      .then((data) => data.json())\r\n      .then((data) => this.parseProblemTagData(data[\"values\"]));\r\n  }\r\n\r\n  parseProblemTagData(data) {\r\n    let tagList = new ProblemInfoList();\r\n    for (let i = 0; i <= data.length - 1; i++) {\r\n      let link = data[i][0];\r\n      let duration = data[i][1];\r\n      let company = data[i][2];\r\n      let problemTagObject = new ProblemTag();\r\n      problemTagObject.duration = duration;\r\n      problemTagObject.company = company;\r\n      problemTagObject.url = link;\r\n      tagList.push(duration, problemTagObject);\r\n    }\r\n    this.cachedData = tagList;\r\n    return tagList;\r\n  }\r\n\r\n  fetchtProblemTagsMap() {\r\n    let range = `ProblemCompaniesTags_Map!A:C`;\r\n    let url = GoogleSheetsAPIManager.getUrl(range);\r\n    return fetch(url)\r\n      .then((data) => data.json())\r\n      .then((data) => this.setProblemTagMap(data[\"values\"]));\r\n  }\r\n\r\n  setProblemTagMap(data) {\r\n    for (let i = 0; i <= data.length - 1; i++) {\r\n      let url = data[i][0];\r\n      let startRow = data[i][1];\r\n      let endRow = data[i][2];\r\n      this.map[url] = [startRow, endRow];\r\n    }\r\n    this.mapFetched = true;\r\n  }\r\n}\r\n\r\nclass GoogleSheetsEditorialDataFetcher {\r\n  static async fetchEditorialDataByRow(row) {\r\n    let range = \"Problem!L\" + row;\r\n    let url = GoogleSheetsAPIManager.getUrl(range);\r\n    let response = await fetch(url);\r\n    let data = await response.json();\r\n    let values = data[\"values\"];\r\n    if (values == undefined) return \"<h1>No data</h1>\";\r\n    return values[0][0];\r\n  }\r\n}\r\n\r\nexport {\r\n  GoogleSheetsAPIManager,\r\n  GoogleSheetsProblemTableDataFetcher,\r\n  GoogleSheetsCompanyProblemDataFetcher,\r\n  GoogleSheetsTopProblemDataFetcher,\r\n  GoogleSheetsProblemTagsDataFetcher,\r\n  GoogleSheetsEditorialDataFetcher,\r\n};\r\n","import { GoogleSheetBufferManager } from \"../BufferManager/GoogleSheetsBufferManager\"\r\nimport { GoogleSheetsEditorialDataFetcher, GoogleSheetsProblemTableDataFetcher } from \"./GoogleSheetsDataFetcher\";\r\n\r\n\r\n\r\nclass LocalStorageFrequencyDataFetcher{ \r\n    constructor() { \r\n        this.bufferManager = new GoogleSheetBufferManager()\r\n        this.dataTTL = 1209600000; //two weeks in milliseconds\r\n    }\r\n\r\n    fetchData() { \r\n        return this.bufferManager.getBufferedData(\"TableFrequencyData\")\r\n        .then(data => this.onDataFetched(data))\r\n    }; \r\n\r\n    onDataFetched(data) { \r\n        if(Object.keys(data).length == 0 || data == undefined){ \r\n            return this.bufferManager.refreshTableData()\r\n            .then(data => this.bufferManager.getBufferedData(\"TableFrequencyData\"))\r\n            .then(data => data[\"TableFrequencyData\"][\"data\"])\r\n        }\r\n        //refresh data if over ttl duration. The cost refreshing the whole data  is the same as checking if there is new update or not\r\n        if(Date.now() > data[\"TableFrequencyData\"][\"FetchDate\"] + this.dataTTL) {\r\n            this.bufferManager.refreshTableData()\r\n        }\r\n        return data[\"TableFrequencyData\"][\"data\"]\r\n    }\r\n\r\n    fetchPremiumProblem(problemId) { \r\n        return this.fetchProblemData(problemId)\r\n    }\r\n    \r\n    fetchProblemData(problemId) {\r\n        return this.bufferManager.getRowOffsetData()\r\n        .then(data => this.onPremiumProblemDataFetched(problemId, data))\r\n    }\r\n\r\n    onPremiumProblemDataFetched(problemId, data) { \r\n        data = data[\"rowOffset\"]\r\n        if(problemId in data == false){ \r\n            return \"<h1>No data</h1>\";\r\n        }else { \r\n            let row = data[problemId]\r\n            return GoogleSheetsProblemTableDataFetcher.fetchProblemDataByRow(row)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass LocalStorageEditorialDataFetcher { \r\n    fetchData(problemId) {\r\n        return new GoogleSheetBufferManager().getRowOffsetData()\r\n        .then(data => this.onPremiumProblemDataFetched(problemId, data))\r\n    }\r\n\r\n    onPremiumProblemDataFetched(problemId, data) { \r\n        data = data[\"rowOffset\"]\r\n        if(problemId in data == false){ \r\n            return \"<h1>No data</h1>\";\r\n        }else { \r\n            let row = data[problemId]\r\n            return GoogleSheetsEditorialDataFetcher.fetchEditorialDataByRow(row)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport {LocalStorageFrequencyDataFetcher, \r\n    LocalStorageEditorialDataFetcher\r\n}","import { CSSStyler } from \"../Objects\"\r\n\r\nfunction generateInnerProgressbar(width) { \r\n    let progress = document.createElement('div')\r\n    progress.style = `\r\n    background-color: ${CSSStyler.COLOR_ACCENT};\r\n    width: ${width}%;\r\n    height: 0.5rem;\r\n    border-bottom-right-radius: 0.5rem;\r\n    border-top-right-radius: 0.5rem;\r\n    border-bottom-left-radius: 0.5rem;\r\n    border-top-left-radius: 0.5rem;\r\n    `\r\n    return progress\r\n}\r\n\r\nfunction generateRedInnerProgressBar(width) { \r\n    let progress = document.createElement('div')\r\n    progress.style = `\r\n    background-color: red;\r\n    width: ${width}%;\r\n    height: 0.5rem;\r\n    border-bottom-right-radius: 0.5rem;\r\n    border-top-right-radius: 0.5rem;\r\n    border-bottom-left-radius: 0.5rem;\r\n    border-top-left-radius: 0.5rem;\r\n    `\r\n    return progress\r\n}\r\n\r\nfunction getRateUsElement() { \r\n    let span = document.createElement('span')\r\n    let innerHtml =  `<h3>\r\n    if you enjoy our app rate us <a href = \"https://chrome.google.com/webstore/detail/leetcode-premium-unlocker/gnpcbhmchfdadabkcmooljbhgdemgiof\">here</a>. \r\n    </h3>\r\n    `\r\n    span.innerHTML = innerHtml;\r\n    let urls = span.getElementsByTagName('a')\r\n    for(let i =0; i <= urls.length -1; i ++) { \r\n        urls[i].classList.add('clickable')\r\n    }\r\n    return span\r\n}\r\n\r\n\r\nexport { \r\ngenerateInnerProgressbar, \r\ngenerateRedInnerProgressBar, \r\ngetRateUsElement\r\n}","\r\nimport { CSSStyler } from \"../Objects\"\r\nclass TableElementGenerator{ \r\n    static generateTextElement(text) { \r\n        let div = document.createElement('div')\r\n        let h3 = document.createElement('h3')\r\n        h3.textContent = text\r\n        h3.style = `\r\n        text-align: center;\r\n        `\r\n        div.appendChild(h3)\r\n        return div\r\n    }\r\n\r\n    static generateProblemIdElement(text) { \r\n       let div = TableElementGenerator.generateTextElement(text)\r\n       div.style = `\r\n       width: 5%\r\n       `\r\n       return div\r\n    }\r\n\r\n    static generateProblemFrequencyElement(percentage){ \r\n        let progressBar = document.createElement('div')\r\n        progressBar.setAttribute(\"title\", String(Math.round(percentage*100)) + \"%\")\r\n        progressBar.style = `\r\n        display: flex;\r\n        height: 1rem;\r\n        overflow: hidden;\r\n        font-size: .75rem;\r\n        background-color: ${CSSStyler.getComplementaryColor()}; \r\n        border-radius: 0.5rem;\r\n        margin-top: auto;\r\n        margin-bottom: auto;\r\n        width:10%; \r\n        `\r\n\r\n        let progress = document.createElement('div')\r\n        progress.style = `\r\n        border-radius: 0.5rem;\r\n        height:100%; \r\n        width:${percentage*100}%; \r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        overflow: hidden;\r\n        color: #fff;\r\n        background-color: ${CSSStyler.COLOR_ACCENT};\r\n        `\r\n        progressBar.appendChild(progress)\r\n        return progressBar\r\n    }\r\n\r\n    static generateProblemNameElement(problem_name, problem_url) { \r\n        let problemCell = document.createElement('div')\r\n        let a = document.createElement('a')\r\n        a.href = problem_url\r\n        a.textContent = problem_name\r\n        problemCell.appendChild(a)\r\n        problemCell.style = `\r\n        width: 50%\r\n        `\r\n        return problemCell\r\n    }\r\n\r\n    static generateProblemDifficultyElement(text) {\r\n        let div = TableElementGenerator.generateTextElement(text)\r\n        div.style = `\r\n        width: 12%\r\n        `\r\n        switch(text) { \r\n            case \"Hard\":\r\n                div.children[0].style.color = \"red\"\r\n                break  \r\n            case \"Medium\": \r\n                div.children[0].style.color = \"orange\"\r\n                break ; \r\n            case \"Easy\": \r\n                div.children[0].style.color = \"green\"\r\n                break ; \r\n        }\r\n        return div\r\n    }\r\n\r\n    static generateProblemAcceptanceElement(percentage) { \r\n        let div = TableElementGenerator.generateTextElement(percentage)\r\n        div.style = `\r\n        width: 10%\r\n        `\r\n        return div\r\n    }\r\n\r\n    static generateRowElement(){ \r\n        let row = document.createElement('div')\r\n        row.style = `\r\n        display:flex;\r\n        border-top: solid 1px ${CSSStyler.getComplementaryColor()};\r\n        `\r\n        return row\r\n    }\r\n\r\n    static generateTableContentElement(data) { \r\n        let parentDiv = document.createElement('div')\r\n        for(let i = 0; i <= data.length-1; i ++) {        \r\n            let row = TableElementGenerator.generateRowElement()        \r\n\r\n            let frequency = data[i].frequency\r\n            let id = data[i].id\r\n            let difficulty = data[i].difficulty\r\n            let problemUrl = data[i].problemUrl\r\n            let problemName = data[i].problemName\r\n            let acceptance = String(Math.round(data[i].acceptance * 100)) + \"%\"\r\n\r\n            row.appendChild(TableElementGenerator.generateProblemIdElement(id))\r\n            row.appendChild(TableElementGenerator.generateProblemNameElement(problemName, problemUrl))\r\n            row.appendChild(TableElementGenerator.generateProblemAcceptanceElement(acceptance))\r\n            row.appendChild(TableElementGenerator.generateProblemDifficultyElement(difficulty))\r\n            row.appendChild(TableElementGenerator.generateProblemFrequencyElement(frequency))\r\n\r\n            parentDiv.append(row)\r\n        }\r\n        parentDiv.id = \"table-content\"\r\n        return parentDiv\r\n    }\r\n\r\n    static generateDurationElement(data) {\r\n        let button = document.createElement('button')   \r\n        button.innerText =data\r\n        button.style = ` \r\n        width:auto; \r\n        margin-right: 2%; \r\n        `\r\n        button.setAttribute(\"duration\", data)\r\n\r\n        button.addEventListener('select', () => {\r\n            button.classList.add(\"selected-duration-button\")\r\n            button.classList.remove(\"unselected-duration-button\")\r\n        })\r\n\r\n        button.addEventListener('unselect', () => {\r\n            button.classList.add(\"unselected-duration-button\")\r\n            button.classList.remove(\"selected-duration-button\")\r\n        })\r\n        button.classList.add(\"unselected-duration-button\")\r\n        return button\r\n    }\r\n\r\n    static generateTitleElement(title) { \r\n        let h2 = document.createElement('h2')\r\n        h2.innerText = title\r\n        h2.style = `\r\n        font-size:1.5em;`\r\n        return h2\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport {\r\nTableElementGenerator, \r\n}","import { CSSStyler } from \"../Objects\"\r\n\r\nclass TagsElementGenerator{\r\n    static  generateHeader(text) {\r\n        let h3 = document.createElement('h3')\r\n        h3.classList.add(\"default-text-color\")\r\n        h3.textContent = text\r\n        return h3\r\n    }\r\n\r\n    static generateTag(text) { \r\n        let div = document.createElement('div')\r\n        div.style = `\r\n        min-width:7%;\r\n        margin-right: 3%;\r\n        margin-bottom: 1%;\r\n        max-width:15%; \r\n        text-align:center; \r\n        border-radius: 21px;\r\n        `\r\n        div.classList.add(\"sub-title-text-color\")\r\n        div.textContent = text; \r\n        return div\r\n\r\n    }\r\n\r\n    static generateRow() { \r\n        let row = document.createElement('div')\r\n        row.style = `\r\n        display:flex;\r\n        flex-wrap: wrap;\r\n        border-top: solid 1px darkgrey;\r\n\r\n        `\r\n        return row\r\n\r\n    }\r\n}\r\n\r\nexport {TagsElementGenerator}","import { CSSStyler } from \"../Objects\"\r\n\r\n\r\nclass CompanySwipperElementModifier { \r\n\r\n    constructor() {\r\n        this.elementModifier = []\r\n    }\r\n  \r\n    injectFunctionToTargetElement(func) { \r\n        this.elementModifier.push(func)\r\n    }\r\n\r\n    modifyElement() { \r\n        this.modifyActiveElement()\r\n        this.addObserverToCompaniesSection()\r\n    }\r\n\r\n    isSwiperLoading() { \r\n        return document.getElementsByClassName(\"swiper-autoheight\")[1] == undefined\r\n    }\r\n    \r\n    modifyActiveElement() { \r\n        if(this.isSwiperLoading()) { \r\n            window.setTimeout(() => {this.modifyActiveElement.bind(this)()} ,100);\r\n            return \r\n        }\r\n        \r\n        let parentSwipper = document.getElementsByClassName(\"swiper-autoheight\")[2]\r\n        let swipers = parentSwipper.getElementsByClassName('swiper-slide-active')\r\n        let swiper = swipers[swipers.length-1]\r\n        let links = swiper.getElementsByTagName('a')\r\n        for(let ii = 0; ii <= links.length-1; ii ++) {\r\n            let href = links[ii].href.split(\"/\")\r\n            let companyName = href[href.length-1]\r\n            let companyButton = links[ii]\r\n            if (companyButton.getAttribute(\"company-name\") == null) {\r\n                companyButton.setAttribute(\"company-name\", companyName)\r\n            }\r\n            companyButton.href = \"javascript:void(0)\"\r\n            for(let iii = 0; iii <= this.elementModifier.length -1; iii++) { \r\n                this.elementModifier[iii](companyButton)\r\n            }\r\n            this.onModifyElementSuccess(companyButton)\r\n        }\r\n    }\r\n\r\n    onModifyElementSuccess(element) {\r\n        //generate some kind of indication if element have been modified\r\n        let spans = element.getElementsByTagName('span')\r\n        let companyButtonNumbeLabel = spans[spans.length-1]\r\n        companyButtonNumbeLabel.style.backgroundColor = CSSStyler.COLOR_ACCENT\r\n\r\n    }\r\n\r\n    addObserverToCompaniesSection() {\r\n        if(this.isSwiperLoading()) { \r\n            window.setTimeout(() => {this.addObserverToCompaniesSection.bind(this)()} ,100);\r\n            return \r\n        }\r\n        let parentSwipper = document.getElementsByClassName(\"swiper-autoheight\")[2]\r\n        var swipper =  parentSwipper.parentNode.parentNode\r\n        const observer = new MutationObserver(() => {\r\n            this.modifyActiveElement()\r\n        });\r\n    \r\n        if(!swipper) {\r\n            window.setTimeout(() => {this.addObserverToCompaniesSection()} ,100);\r\n            return;\r\n        }\r\n        var config = {childList: true, subtree: true,  attributes: true, attributeFilter: ['class']};\r\n        observer.observe(swipper,config);\r\n    }\r\n}\r\n\r\nexport {CompanySwipperElementModifier}","import { CSSStyler } from \"../Objects\"\r\n\r\n\r\n\r\n\r\nclass EditorialPageElementModifier { \r\n    constructor() { \r\n        this.elementModifier = []\r\n        this.checkCount = 0 \r\n    }\r\n\r\n    injectFunctionToTargetElement(func) { \r\n        this.elementModifier.push(func)\r\n    }\r\n\r\n    getTabMenu() { \r\n        let tabMenu = document.getElementsByClassName('gap-8')[0]\r\n        if (tabMenu == undefined) tabMenu = document.getElementsByClassName('gap-6')[0]\r\n        return tabMenu\r\n    }\r\n\r\n    modifyElement() { \r\n        let tabs = this.getTabMenu()\r\n        if(tabs == undefined) {\r\n            window.setTimeout(() => {this.modifyElement()} ,100);\r\n            return;\r\n        }\r\n        this.addEventListenerToEditorialButton();\r\n    }\r\n\r\n    addEventListenerToEditorialButton() { \r\n        let button = this.getEditorialButton()\r\n        if (button == undefined) { \r\n            window.setTimeout(() => {this.addEventListenerToEditorialButton()}, 50)\r\n            return\r\n        }\r\n        button.parentElement.parentElement.addEventListener('click', (event) => {\r\n            for(let iii = 0; iii <= this.elementModifier.length -1; iii++) { \r\n                this.elementModifier[iii](button)\r\n            }\r\n            if(button.getAttribute(\"problem-id\") != undefined) event.stopImmediatePropagation() \r\n        })\r\n        this.disableEditorialRedirect()\r\n        this.removeEditorialLockLogo(); \r\n    }\r\n\r\n    getEditorialButton() {\r\n        return document.getElementsByClassName('gap-8')[0].children[1]\r\n        .getElementsByClassName(\"flex\")[1]\r\n    }\r\n\r\n    disableEditorialRedirect() { \r\n        document.getElementsByClassName('gap-8')[0].children[1].href = \"javascript:void(0)\"\r\n    }\r\n\r\n    removeEditorialLockLogo() { \r\n        let editorialButton = this.getEditorialButton()\r\n        if (editorialButton == undefined) {\r\n            window.setTimeout(() => {this.removeEditorialLockLogo()} ,50);\r\n            return;\r\n        }\r\n        let lockLogo = document.getElementsByClassName('gap-8')[0].children[1]\r\n        .getElementsByClassName(\"flex\")[1]\r\n        .children[0].getElementsByTagName('svg')[0]\r\n        if(lockLogo == undefined) { \r\n            if(this.checkCount > 5) return\r\n            window.setTimeout(() => {this.removeEditorialLockLogo()} ,150);\r\n            this.checkCount += 1 \r\n            return \r\n        }\r\n        lockLogo.style.opacity = 0; \r\n        editorialButton.setAttribute(\"problem-name\", document.URL.split(\"/\")[4])\r\n        editorialButton.setAttribute(\"problem-id\", this.getProblemId())\r\n        this.addUnlockedIndicator()\r\n    }\r\n\r\n    addUnlockedIndicator(){ \r\n        let editorialTabElement = this.getTabMenu().children[1]; \r\n        editorialTabElement.getElementsByTagName('span')[0].style.color = CSSStyler.COLOR_ACCENT\r\n    }\r\n\r\n    getProblemId() { \r\n        //Todo: Dont rely on problem id, if description page is not opened problem id wont be fetched\r\n       return  document.getElementsByClassName(\"text-lg\")[0].textContent.split(\".\")[0]\r\n    }\r\n}\r\n\r\n\r\nexport {EditorialPageElementModifier}","class ProblemTableElementModifier {\r\n  constructor() {\r\n    this.elementModifier = [];\r\n    this.observer = null;\r\n  }\r\n\r\n  modifyElement() {\r\n    this.observer = new MutationObserver((mutationsList) => {\r\n        console.log(\"mutation observed\");\r\n      this.modifyActiveElement();\r\n    });\r\n    //this.modifyActiveElement();\r\n    this.addObserverToProblemTable();\r\n  }\r\n\r\n  injectFunctionToTargetElement(func) {\r\n    this.elementModifier.push(func);\r\n  }\r\n\r\n  isTableLoading() {\r\n    let table = document.querySelectorAll('div[role=\"rowgroup\"]')[2];\r\n\r\n    let problemsets = table.querySelectorAll('div[role=\"row\"]');\r\n\r\n    return (\r\n      problemsets[0].querySelectorAll('[role=\"cell\"]')[1].textContent == \"\"\r\n    );\r\n  }\r\n\r\n  getTable() {\r\n    if (this.isTableLoading()) {\r\n      return null;\r\n    }\r\n    let table = document.querySelectorAll('div[role=\"rowgroup\"]')[2];\r\n    return table;\r\n  }\r\n  \r\n  getProblemSets() {\r\n    if (this.isTableLoading()) {\r\n      return [];\r\n    }\r\n    let table = this.getTable();\r\n    let problemsets = table.querySelectorAll('div[role=\"row\"]');\r\n    return problemsets;\r\n  }\r\n\r\n  modifyActiveElement = () => {\r\n    // if (this.isTableLoading()) {\r\n    //     console.log(\"table is loading, waiting for 4000ms\");\r\n    //   window.setTimeout(() => {\r\n    //     this.modifyActiveElement.bind(this)();\r\n    //   }, 3000);\r\n    //   return;\r\n    // }\r\n    this.disconnectObserverToProblemTable();\r\n    let table = this.getTable();\r\n    let problemsets =  this.getProblemSets();\r\n    console.log(\"count of elements to modify :\", problemsets.length);\r\n    \r\n    for (let i = 0; i <= problemsets.length - 1; i++) {\r\n      console.log(\"editing problemset \", i);\r\n\r\n      let cells = problemsets[i].querySelectorAll('[role=\"cell\"]');\r\n      let problemName = cells[1].textContent;\r\n      let id = problemName.split(\".\")[0];\r\n      problemsets[i].setAttribute(\"problem-id\", String(id));\r\n      let isPremium = problemsets[i].getElementsByTagName(\"rect\").length > 0;\r\n      problemsets[i].setAttribute(\"is-premium\", isPremium);\r\n      for (let ii = 0; ii <= this.elementModifier.length - 1; ii++) {\r\n        this.elementModifier[ii](problemsets[i]);\r\n      }\r\n    }\r\n    this.addObserverToProblemTable();\r\n  };\r\n\r\n  disconnectObserverToProblemTable() {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  addObserverToProblemTable() {\r\n    let table = this.getTable();\r\n    console.log(\"table \", table);\r\n\r\n    if (table == null) {\r\n      console.log(\"table is null, waiting for 3000ms\");\r\n      window.setTimeout(() => {\r\n        this.addObserverToProblemTable.bind(this)();\r\n      }, 3000);\r\n      return;\r\n    }\r\n    \r\n    console.log(\"obseving table \");\r\n    var config = { childList: true, subtree: true };\r\n    this.observer.observe(table, config);\r\n  }\r\n}\r\nexport { ProblemTableElementModifier };\r\n","import { CSSStyler } from \"../Objects\";\r\n\r\n\r\nclass ProblemTagsElementModifier { \r\n    constructor() { \r\n        this.tagButtonListener = []\r\n    }\r\n\r\n    getTabMenu() { \r\n        let tabMenu = document.getElementsByClassName('gap-8')[0]\r\n        if (tabMenu == undefined) tabMenu = document.getElementsByClassName('gap-6')[0]\r\n        return tabMenu\r\n    }\r\n\r\n    modifyElement() { \r\n        let tabMenu = this.getTabMenu()\r\n        if(tabMenu == undefined) {\r\n            window.setTimeout(() => {this.modifyElement()} ,100);\r\n            return;\r\n        }\r\n        let tabs = tabMenu.children[0].children\r\n        if(tabs.length == 0) {\r\n            window.setTimeout(() => {this.modifyElement()} ,100);\r\n            return;\r\n        }\r\n        if(this.isDescriptionTabActive()) this.modifyCompaniesTagButton()\r\n        this.addObserverToLeftTab()\r\n    }\r\n\r\n    addObserverToLeftTab() { \r\n        let tabElement = this.getTabMenu()\r\n        if(tabElement == undefined) {\r\n            window.setTimeout(() => {this.addObserverToLeftTab()} ,100);\r\n            return;\r\n        }\r\n        let config = {childList: true, subtree: true,  attributes: true, attributeFilter: ['class']};\r\n        let observer = new MutationObserver(() => { \r\n            if(this.isDescriptionTabActive()) this.modifyCompaniesTagButton()\r\n        })\r\n        observer.observe(tabElement, config)\r\n    }\r\n\r\n    isDescriptionTabActive() {\r\n        return this.getTabMenu().children[0].children[0].childElementCount == 2\r\n    }\r\n\r\n    modifyCompaniesTagButton() { \r\n        let tagButton = document.getElementsByClassName('pt-3')[0]\r\n        if(!tagButton) {\r\n            window.setTimeout(() => {this.modifyCompaniesTagButton.bind(this)()} ,100);\r\n            return;\r\n        }\r\n        let lockicon = tagButton.getElementsByTagName('svg')[0]\r\n        if(lockicon == undefined) return\r\n        let tagDiv  = lockicon.parentElement\r\n        lockicon.remove()\r\n        let newNode = tagDiv.cloneNode(true)\r\n        tagDiv.parentElement.replaceChild(newNode, tagDiv)\r\n        newNode.style.backgroundColor = CSSStyler.COLOR_ACCENT\r\n        newNode.style.color = 'black'\r\n        for(let i =0; i <= this.tagButtonListener.length -1; i ++) {\r\n            newNode.addEventListener('click', this.tagButtonListener[i])\r\n        }\r\n    }\r\n\r\n    addTagButtonOnClickListener(func){ \r\n        this.tagButtonListener.push(func)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {ProblemTagsElementModifier}","\r\nimport { CSSStyler } from \"../Objects\";\r\n\r\nclass TopProblemFoldoutElementModifier{ \r\n    constructor() {\r\n        this.elementModifier = []\r\n    }\r\n  \r\n    injectFunctionToTargetElement(func) { \r\n        this.elementModifier.push(func)\r\n    }\r\n\r\n    modifyElement() {\r\n        if(this.isloading()) { \r\n            window.setTimeout(() => {this.modifyElement()} ,100);\r\n            return;\r\n        } \r\n        this.observer = new MutationObserver(() => {\r\n            this.modifyLockedElement()\r\n        });\r\n        this.modifyLockedElement()\r\n        this.addObsersverToFoldout()\r\n    }\r\n\r\n    isloading() { \r\n        return document.getElementsByClassName(\"space-y-1.5\")[0] == undefined\r\n    }\r\n\r\n    addObsersverToFoldout() { \r\n        let foldout = document.getElementsByClassName(\"space-y-1.5\")[0]\r\n        var config = {childList: true, subtree: true};\r\n        this.observer.observe(foldout,config);\r\n    }\r\n\r\n    modifyLockedElement = () => { \r\n        let foldout = document.getElementsByClassName(\"space-y-1.5\")[0]\r\n        if(!foldout) {\r\n            window.setTimeout(() => {this.modifyLockedElement.bind(this)()} ,100);\r\n            return;\r\n        }\r\n        let foldoutItem = foldout.children \r\n        for(let i =0; i <= foldoutItem.length -2; i ++){ \r\n            let lockLogo = foldoutItem[i].getElementsByTagName('svg') \r\n            if (lockLogo.length > 0) { \r\n                foldoutItem[i].getElementsByTagName('a')[0].href = \"javascript:void(0)\"\r\n                let itemName = foldoutItem[i].textContent.replaceAll(\" \", \"\")\r\n                foldoutItem[i].setAttribute(\"item\", itemName)\r\n                foldoutItem[i].style.color = CSSStyler.COLOR_ACCENT\r\n                lockLogo[0].remove()\r\n                for(let iii = 0; iii <= this.elementModifier.length -1; iii++) { \r\n                    this.elementModifier[iii](foldoutItem[i])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    disconnectObserverToFoldout() { \r\n        this.observer.disconnect()\r\n    }\r\n}\r\n\r\nexport {TopProblemFoldoutElementModifier}","\r\nclass ProblemInfo{ \r\n    constructor(frequency, id, difficulty, problemUrl, problemName, acceptance) { \r\n        this.frequency = frequency \r\n        this.id = id\r\n        this.difficulty = difficulty\r\n        this.problemUrl = problemUrl \r\n        this.problemName = problemName\r\n        this.acceptance = acceptance\r\n    }\r\n}\r\n\r\nclass CompanyProblemInfo extends ProblemInfo { \r\n    constructor(frequency, id, difficulty, problemUrl, problemName, acceptance, companyName, duration) { \r\n        super(frequency, id, difficulty, problemUrl, problemName, acceptance) \r\n        this.companyName = companyName\r\n        this.duration = duration\r\n    }\r\n}\r\n\r\nclass ProblemTag{ \r\n    constructor(duration, company, url) { \r\n        this.url  = url\r\n        this.duration = duration\r\n        this.company = company\r\n    }\r\n}\r\n\r\nclass InfoList{ \r\n    constructor() { \r\n        this.data = {}\r\n    }\r\n\r\n    getKeys() { \r\n        return Object.keys(this.data)\r\n    }\r\n\r\n    getList(key) { \r\n        if (key == undefined) throw new Error(\"Key cannot be undefined\")\r\n        if (key in this.data) return this.data[key]\r\n        return []\r\n    }\r\n}\r\n\r\n\r\nclass ProblemInfoList extends InfoList{ \r\n    push(key, value) { \r\n        if(key == undefined || value == undefined ) throw new Error(\"Key/Value error\")\r\n        if (key in this.data) { \r\n            this.data[key].push(value)\r\n            return; \r\n        }\r\n        let arr = []\r\n        arr.push(value)\r\n        this.data[key] = arr\r\n    }\r\n}\r\n\r\nclass CompanyProblemInfoList extends InfoList{ \r\n    push(key, value) { \r\n        if (key in this.data) { \r\n            this.data[key].push(value)\r\n            return; \r\n        }\r\n        let arr = new ProblemArray()\r\n        arr.push(value)\r\n        this.data[key] = arr\r\n    }\r\n}\r\n\r\nclass CompanyProblemDurations {\r\n    static SIXMONTHS = \"6 months\" \r\n    static TWOYEARS  = \"2 years\"\r\n    static  ALLTIME = \"All time\"\r\n    static  ONEYEAR = \"1 year\"\r\n\r\n    static DURATION_LIST = [\r\n        CompanyProblemDurations.SIXMONTHS, \r\n        CompanyProblemDurations.ONEYEAR, \r\n        CompanyProblemDurations.TWOYEARS, \r\n        CompanyProblemDurations.ALLTIME, \r\n    ]\r\n}\r\n\r\nclass ProblemArray extends Array { \r\n    sort(by, reverse = false) {  \r\n        let sorter = new by()\r\n        sorter.sort(this, reverse)\r\n    }\r\n}\r\n\r\n\r\nclass CSSStyler { \r\n\r\n    static getContainerBackgroundColor() { \r\n        let isDarkMode = document.body.classList.contains(\"chakra-ui-dark\")\r\n        switch (isDarkMode){ \r\n            case true: \r\n                return \"#151515\"\r\n            case false: \r\n                return \"#f3f3f3\"\r\n        }\r\n    }\r\n\r\n    static getComplementaryColor() { \r\n        let isDarkMode = document.body.classList.contains(\"chakra-ui-dark\")\r\n        switch (isDarkMode){ \r\n            case true: \r\n                return \"#282828\"\r\n            case false: \r\n                return \"#dcdcdc\"\r\n        }\r\n    }\r\n\r\n\r\n    static COLOR_ACCENT = \"#62C555\"\r\n    static BACKGROUND_CONTAINER_COLOR = '#101010'\r\n    static SUB_BACKGROUND_CONTAINER_COLOR = '#282828'\r\n    static TEXT_COLOR = '#dcdcdc'\r\n    static TEXT_COLOR_SELECTED = '#7d7d7d'\r\n}\r\n\r\nexport {ProblemInfo\r\n    , CompanyProblemInfo\r\n    , CompanyProblemInfoList\r\n    , CompanyProblemDurations\r\n    , ProblemArray\r\n    ,  CSSStyler\r\n    , ProblemTag\r\n    , ProblemInfoList\r\n    , InfoList\r\n}","\r\n\r\n\r\nclass Sorter{ \r\n    getValue(list, index){ \r\n        return list[index]\r\n    }\r\n\r\n    doSwap(left, right) { \r\n        return left > right\r\n    }\r\n\r\n    swap(arr, i, j) {\r\n        let temp = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n    \r\n    partition(arr, low, high, reverse) {\r\n        let pivot = this.getValue(arr, high);\r\n        let i = (low - 1);\r\n\r\n        for (let j = low; j <= high - 1; j++) {\r\n            let low = this.getValue(arr, j)\r\n            let swap = this.doSwap(low, pivot)\r\n            if(reverse) { \r\n                swap = !swap\r\n            }\r\n            if (swap) {\r\n                i++;\r\n                this.swap(arr, i, j);\r\n            }\r\n        }\r\n        this.swap(arr, i + 1, high);\r\n        return (i + 1);\r\n    }\r\n\r\n\r\n    sort(arr, reverse = false){ \r\n        this.quickSort(arr, 0, arr.length-1, reverse)\r\n    }\r\n\r\n    quickSort(arr, low, high, reverse) {\r\n        if(high == undefined && low == undefined) { \r\n            high = arr.length -1; \r\n            low = 0\r\n        }\r\n        if (low < high) {\r\n            let pi = this.partition(arr, low, high, reverse);\r\n            this.quickSort(arr, low, pi - 1, reverse);\r\n            this.quickSort(arr, pi + 1, high, reverse);\r\n        }\r\n    }\r\n}\r\n\r\nclass AcceptanceSorter extends Sorter { \r\n    getValue(list, index){ \r\n        return list[index].acceptance\r\n    }\r\n}\r\n\r\nclass DifficultySorter extends Sorter{ \r\n    getValue(list, index){ \r\n        return list[index].difficulty\r\n    }\r\n\r\n    doSwap(left, right) {\r\n        let difficulties = [\"Easy\", \"Medium\", \"Hard\"]\r\n        return difficulties.indexOf(left) < difficulties.indexOf(right)\r\n    }\r\n\r\n}\r\n\r\nclass IDSorter extends Sorter { \r\n    getValue(list, index){ \r\n        return parseInt(list[index].id)\r\n    }\r\n}\r\n\r\nclass NameSorter extends Sorter { \r\n    getValue(list, index){ \r\n        return list[index].problemName\r\n    }\r\n    \r\n    doSwap(left, right) {\r\n        let alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789\"\r\n        let firstWordLeft = left[0].toLowerCase()\r\n        let firstWordRight = right[0].toLowerCase()\r\n        return alphabet.indexOf(firstWordLeft) < alphabet.indexOf(firstWordRight)\r\n    }\r\n}\r\n\r\nclass FrequencySorter extends Sorter { \r\n    getValue(list, index){ \r\n        return list[index].frequency\r\n    }\r\n}\r\n\r\n\r\nexport {AcceptanceSorter, DifficultySorter, NameSorter, IDSorter, FrequencySorter}\r\n\r\n","\r\nimport { CompanySwipperElementModifier } from \"../ElementModifier/CompanySwipperElementModifier\"\r\nimport { TableContentBuilder } from \"../ContentBuilder/TableContentBuilder\"\r\nimport {modalManager} from \"../ContainerManager\"\r\nimport { GoogleSheetsCompanyProblemDataFetcher } from \"../DataFetcher/GoogleSheetsDataFetcher\"\r\nimport { analyticsManager } from \"../AnalyticsManager\"\r\n\r\n\r\nclass CompaniesProblemUnlocker {\r\n    constructor() { \r\n        this.elementModifier = new CompanySwipperElementModifier()\r\n        this.dataFetcher = new GoogleSheetsCompanyProblemDataFetcher()\r\n        this.containerManager = modalManager\r\n        this.isFetching = false\r\n        this.analyticsManager = analyticsManager\r\n        this.companyProblemButtonId = 1\r\n        this.name = \"CompaniesProblemUnlocker\"\r\n    }\r\n\r\n    unlock() { \r\n        this.elementModifier.injectFunctionToTargetElement(this.getFunctionToBeInjected())\r\n        this.elementModifier.modifyElement()\r\n        this.analyticsManager.fireUnlockedDataEvent(this.name)\r\n    }\r\n\r\n    getFunctionToBeInjected() { \r\n        return (element) => {\r\n            element.addEventListener(\"click\", this.onCompanyButtonClick);\r\n        }\r\n    }\r\n\r\n    onCompanyButtonClick = (event) => { \r\n        if(this.isFetching) return;\r\n        this.isFetching = true\r\n        let companyName = event.currentTarget.getAttribute(\"company-name\")\r\n        this.analyticsManager.fireModifiedButtonClickedEvent(this.companyProblemButtonId, \"CompanyButton\", companyName)\r\n        let title = event.currentTarget.getElementsByClassName(\"text-label-2\")[0].textContent\r\n        this.containerManager.clearModalContent()\r\n        this.containerManager.openModal()\r\n        this.containerManager.showLoadingIcon()\r\n        this.dataFetcher.fetchData(companyName)\r\n        .then(data => this.onFetchSuccess(data, title)).then(data => {this.isFetching = false})\r\n        .catch(e =>{this.isFetching=false} )\r\n    }\r\n\r\n    onFetchSuccess(data, companyName) { \r\n        let targetParent = this.containerManager.getModalContentBox()\r\n        let tableBuilder = new TableContentBuilder(data)\r\n        let durations = data.getKeys()\r\n        for(let i =0; i <= durations.length -1; i ++) { \r\n            tableBuilder.addDurationData(durations[i], data.getList(durations[i]))\r\n        }\r\n        tableBuilder.buildRateUsRow()\r\n        tableBuilder.buildTitleRow(companyName)\r\n        tableBuilder.buildDurationsRow()\r\n        tableBuilder.setShownData(data.getList(durations[0]))\r\n        tableBuilder.buildHeaderRow()\r\n        tableBuilder.buildTable()\r\n        this.containerManager.clearModalContent()\r\n        targetParent.appendChild(tableBuilder.getResult())\r\n    }\r\n}\r\n\r\n\r\nexport { \r\n    CompaniesProblemUnlocker\r\n}","import { LocalStorageEditorialDataFetcher } from \"../DataFetcher/LocalStorageDataFetcher\"\r\nimport { EditorialPageElementModifier } from \"../ElementModifier/EditorialPageElementModifier\"\r\nimport { modalManager } from \"../ContainerManager\"\r\nimport { EditorialContentBuilder } from \"../ContentBuilder/EditorialContentBuilder\"\r\n\r\n\r\nclass EditorialUnlocker{\r\n    constructor() {\r\n        this.name = \"EditorialUnlocker\"\r\n        this.elementModifier = new EditorialPageElementModifier()\r\n        this.dataFetcher = new LocalStorageEditorialDataFetcher()\r\n        this.containerManager = modalManager; \r\n        \r\n    }\r\n\r\n    unlock(){\r\n        this.elementModifier.injectFunctionToTargetElement(this.onEditorialTabClicked)\r\n        this.elementModifier.modifyElement()\r\n    }\r\n\r\n    onEditorialTabClicked = (button) => { \r\n        let problemId = button.getAttribute(\"problem-id\")\r\n        if (problemId == undefined) return; \r\n        this.containerManager.clearModalContent()\r\n        this.containerManager.openModal()\r\n        this.containerManager.showLoadingIcon()\r\n        this.dataFetcher.fetchData(problemId)\r\n        .then(data => this.onDataFetched(data))\r\n    }\r\n    \r\n    onDataFetched(innerHtml) { \r\n        let builder = new EditorialContentBuilder()\r\n        builder.buildRateUsText()\r\n        builder.buildContent(innerHtml)\r\n        let targetParent = this.containerManager.getModalContentBox()\r\n        this.containerManager.clearModalContent()\r\n        targetParent.appendChild(builder.getResult())\r\n    }\r\n}\r\n\r\n\r\nexport {EditorialUnlocker}","import { ProblemTableElementModifier } from \"../ElementModifier/ProblemTableElementModifier\";\r\nimport { generateInnerProgressbar, generateRedInnerProgressBar } from \"../ElementGenerator/ElementHelperClass\";\r\nimport { GoogleSheetsProblemTableDataFetcher } from \"../DataFetcher/GoogleSheetsDataFetcher\";\r\nimport { CSSStyler } from \"../Objects\";\r\nimport { modalManager } from \"../ContainerManager\";\r\nimport * as DOMPurify from 'dompurify';\r\nimport { LocalStorageFrequencyDataFetcher } from \"../DataFetcher/LocalStorageDataFetcher\";\r\nimport { analyticsManager } from \"../AnalyticsManager\";\r\n\r\nclass ProblemTableUnlocker{ \r\n    constructor() { \r\n        this.elementModifier =  new ProblemTableElementModifier()\r\n        this.dataFetcher = new LocalStorageFrequencyDataFetcher()\r\n        this.containerManager = modalManager\r\n        this.isFetching = false; \r\n        this.premiumProblemButtonId = 2; \r\n        this.analyticsManager = analyticsManager; \r\n        this.name = \"ProblemTableUnlocker\"\r\n    }\r\n\r\n    onFetchSuccess() {\r\n        this.elementModifier.injectFunctionToTargetElement(ProblemTableUnlocker.removeProgressbarUnlockButton)\r\n        this.elementModifier.injectFunctionToTargetElement(this.insertInnerProgressbar)\r\n        this.elementModifier.injectFunctionToTargetElement(this.modifyPremiumProblemHref)\r\n        this.elementModifier.modifyElement()\r\n    }\r\n\r\n    modifyPremiumProblemHref = (row) => {\r\n        let isPremium = row.getAttribute(\"is-premium\") == \"true\" // to modify\r\n        if(isPremium){\r\n            this.removePremiumIcons(row)\r\n            let problemId = row.getAttribute(\"problem-id\")\r\n            let problemUrl = row.getElementsByTagName(\"a\")[0] \r\n            problemUrl.href = \"javascript:void(0)\"\r\n            problemUrl.style.color = CSSStyler.COLOR_ACCENT; \r\n            problemUrl.addEventListener('click', () => {\r\n                this.onPremiumProblemClicked(problemId)\r\n            }\r\n            )\r\n        }\r\n    }\r\n\r\n    unlock() { \r\n        this.dataFetcher.fetchData()\r\n        .then(data => {this.problemData = data})\r\n        .then(this.onFetchSuccess.bind(this))\r\n        .then(this.analyticsManager.fireUnlockedDataEvent(this.name))\r\n        .catch(e => (console.log(this, e)))\r\n    }\r\n\r\n    onPremiumProblemClicked = (problemId) => { \r\n        if(this.isFetching) return \r\n        this.analyticsManager.fireModifiedButtonClickedEvent(this.premiumProblemButtonId, \"PremiumProblem\", problemId)\r\n        this.isFetching = true; \r\n        this.containerManager.clearModalContent()\r\n        this.containerManager.openModal()\r\n        this.containerManager.showLoadingIcon()\r\n        this.dataFetcher.fetchPremiumProblem(parseInt(problemId))\r\n        .then(data => this.onProblemFetchSuccess(data))\r\n        .then(this.isFetching = false)\r\n    }\r\n\r\n    onProblemFetchSuccess(data){ \r\n        let targetParent = this.containerManager.getModalContentBox()\r\n        this.containerManager.clearModalContent()\r\n        let htmlString = String(data).replaceAll(\"<strong>\", \"<br><strong>\")\r\n        targetParent.innerHTML= DOMPurify.sanitize(htmlString);\r\n        let pres = targetParent.getElementsByTagName(\"pre\")\r\n        for(let i =0; i <= pres.length-1; i ++) { \r\n            pres[i].style = `\r\n            border-radius: 0.5rem;\r\n            font-family: Menlo,sans-serif;\r\n            font-size: .875rem;\r\n            line-height: 1.25rem;\r\n            margin-bottom: 1rem;\r\n            margin-top: 1rem;\r\n            padding: 1rem;\r\n    `\r\n        }\r\n    }\r\n\r\n    removePremiumIcons(row) { \r\n        let cells = row.querySelectorAll('[role=\"cell\"]')\r\n        let lockLogo = cells[0].getElementsByTagName(\"svg\")[0]\r\n        let premiumLogo = cells[1].getElementsByTagName(\"svg\")[0]\r\n        if(lockLogo != undefined) lockLogo.style.opacity = 0; \r\n        if(premiumLogo != undefined) premiumLogo.style.opacity = 0; \r\n    }\r\n\r\n    insertInnerProgressbar = (row) =>  { \r\n        let cells = row.querySelectorAll('[role=\"cell\"]')\r\n        let progressBar = cells[cells.length -1]\r\n\r\n        let id = row.getAttribute(\"problem-id\")\r\n        let width = this.problemData[id] \r\n        if(width == undefined) width = 100\r\n        width *= 100\r\n        let innerProgressbarClassName = \"inner-progressbar\"\r\n        let innerProgressbar = progressBar.getElementsByClassName(innerProgressbarClassName)\r\n        let outerProgressbar = progressBar.getElementsByClassName('rounded-l-lg')[0]\r\n        if(innerProgressbar.length > 0) { innerProgressbar[0].remove()}\r\n        let progress; \r\n        if(id in this.problemData) { \r\n            progress = generateInnerProgressbar(width)\r\n            outerProgressbar.setAttribute(\"title\", `${Math.round(width)}%`)\r\n        } else { \r\n            progress = generateRedInnerProgressBar(width)\r\n            outerProgressbar.setAttribute(\"title\", `No Data`)\r\n        }\r\n        progress.classList.add(innerProgressbarClassName)\r\n        outerProgressbar.appendChild(progress)\r\n    }\r\n\r\n    static removeProgressbarUnlockButton(row) {\r\n        let cells = row.querySelectorAll('[role=\"cell\"]')\r\n        let progressbar = cells[cells.length -1]\r\n\r\n        let lockLogo = progressbar.getElementsByTagName(\"svg\")[0]\r\n        let leftBar = progressbar.getElementsByClassName('rounded-r-lg')[0]\r\n        let rightBar = progressbar.getElementsByClassName('rounded-l-lg')[0]\r\n        if (lockLogo!= undefined) lockLogo.remove(); \r\n        if (leftBar!= undefined) leftBar.remove()\r\n        if (rightBar != undefined){\r\n            rightBar.style = `\r\n            border-bottom-right-radius: 0.5rem;\r\n            overflow: hidden; \r\n            border-top-right-radius: 0.5rem\r\n            `\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {ProblemTableUnlocker}","\r\nimport { GoogleSheetsProblemTagsDataFetcher } from \"../DataFetcher/GoogleSheetsDataFetcher\"\r\nimport { ProblemTagsElementModifier } from \"../ElementModifier/ProblemTagsElementModifier\"\r\nimport { TagsContentBuilder } from \"../ContentBuilder/TagsContentBuilder\"\r\nimport { modalManager } from \"../ContainerManager\"\r\nimport { analyticsManager } from \"../AnalyticsManager\"\r\n\r\nclass ProblemTagsUnlocker{ \r\n    constructor() { \r\n        this.elementModifier = new ProblemTagsElementModifier()\r\n        this.dataFetcher = new GoogleSheetsProblemTagsDataFetcher()\r\n        this.containerManager = modalManager\r\n        this.isFetching = false\r\n        this.problemTagButtonId = 3;\r\n        this.analyticsManager = analyticsManager; \r\n        this.name = \"ProblemTagsUnlocker\"\r\n    }\r\n\r\n    onTagButtonClicked = () => { \r\n        if(this.isFetching) return \r\n        this.isFetching=true\r\n        let problemName = document.URL.split('/')[4]\r\n        this.analyticsManager.fireModifiedButtonClickedEvent(this.problemTagButtonId, \"ProblemTagButton\", problemName)\r\n        this.containerManager.clearModalContent()\r\n        this.containerManager.openModal()\r\n        this.containerManager.showLoadingIcon()\r\n        this.dataFetcher.fetchData(problemName)\r\n        .then(data => this.onFetchSucces(data)) \r\n        .then(data=>{this.isFetching=false})\r\n        .catch( e => {console.log(this, e);\r\n        this.isFetching=false})\r\n    }\r\n\r\n    unlock() { \r\n        this.elementModifier.modifyElement()\r\n        this.elementModifier.addTagButtonOnClickListener(this.onTagButtonClicked)\r\n        this.analyticsManager.fireUnlockedDataEvent(this.name)\r\n    }\r\n\r\n    onFetchSucces = (data) =>  { \r\n        let keys = data.getKeys()\r\n        let builder = new TagsContentBuilder()\r\n        for(let i =0; i<= keys.length -1; i ++) {\r\n            builder.buildHeader(keys[i])\r\n            builder.buildTagsBox(data.getList(keys[i]))\r\n        }\r\n        builder.buildRateUsText()\r\n        let targetParent = this.containerManager.getModalContentBox()\r\n        this.containerManager.clearModalContent()\r\n        targetParent.appendChild(builder.getResult())\r\n    }\r\n}\r\n\r\n\r\nexport {ProblemTagsUnlocker}","\r\nimport { modalManager } from \"../ContainerManager\"\r\nimport { GoogleSheetsTopProblemDataFetcher } from \"../DataFetcher/GoogleSheetsDataFetcher\"\r\nimport { TopProblemFoldoutElementModifier } from \"../ElementModifier/TopProblemFoldoutElementModifier\"\r\nimport { TableContentBuilder } from \"../ContentBuilder/TableContentBuilder\"\r\nimport { analyticsManager } from \"../AnalyticsManager\"\r\n\r\nclass TopProblemUnlocker { \r\n    constructor() {     \r\n        this.elementModifier =  new TopProblemFoldoutElementModifier()\r\n        this.dataFetcher = new GoogleSheetsTopProblemDataFetcher()\r\n        this.containerManager = modalManager\r\n        this.isFetching = false\r\n        this.topProblemButtonId = 4; \r\n        this.analyticsManager = analyticsManager;\r\n        this.name = \"TopProblemUnlocker\" \r\n    }\r\n\r\n    unlock( ){ \r\n        this.elementModifier.injectFunctionToTargetElement(this.getFunctionToBeInjected())\r\n        this.elementModifier.modifyElement()\r\n        this.analyticsManager.fireUnlockedDataEvent(this.name)\r\n    }\r\n\r\n    onTopProblemClicked = (event) => {\r\n        if(this.isFetching)return\r\n        this.isFetching=true\r\n        let itemName = event.currentTarget.getAttribute(\"item\")\r\n        let title = event.currentTarget.getElementsByClassName(\"font-medium\")[0].textContent\r\n        this.analyticsManager.fireModifiedButtonClickedEvent(this.topProblemButtonId, \"TopProblem\", title)\r\n        this.containerManager.clearModalContent()\r\n        this.containerManager.openModal()\r\n        this.containerManager.showLoadingIcon()\r\n        this.dataFetcher.fetchData(itemName)\r\n        .then(data => this.onFetchSuccess(data, title))\r\n        .then(data =>{this.isFetching=false})\r\n        .catch(e => {\r\n            console.log(this, \"Fetch Error\" + e); \r\n            this.isFetching=false\r\n        })\r\n        event.stopImmediatePropagation();\r\n    }\r\n\r\n    onFetchSuccess(data, itemName){\r\n        let tableBulder = new TableContentBuilder()\r\n        tableBulder.setShownData(data)\r\n        tableBulder.buildTitleRow(itemName)\r\n        tableBulder.buildHeaderRow()\r\n        tableBulder.buildTable()\r\n        let table = tableBulder.getResult()\r\n        this.containerManager.clearModalContent()\r\n        this.containerManager.getModalContentBox().appendChild(table)\r\n    } \r\n\r\n    getFunctionToBeInjected() { \r\n        return (element) => {\r\n            element.addEventListener(\"click\", this.onTopProblemClicked);\r\n        }\r\n    }\r\n}\r\n\r\nexport{ TopProblemUnlocker}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\r\nimport { CompaniesProblemUnlocker } from \"./modules/Unlocker/CompaniesProblemUnlocker\";\r\nimport { ProblemTableUnlocker } from \"./modules/Unlocker/ProblemTableUnlocker\";\r\nimport { TopProblemUnlocker } from \"./modules/Unlocker/TopProblemUnlocker\";\r\nimport { ProblemTagsUnlocker } from \"./modules/Unlocker/ProblemTagsUnlocker\";\r\nimport { analyticsManager } from \"./modules/AnalyticsManager\";\r\nimport { EditorialUnlocker } from \"./modules/Unlocker/EditorialUnlocker\";\r\n\r\n\r\n\r\nfunction evaluate(dataObj) { \r\n    for(const url in dataObj) { \r\n        if (window.location.href.includes(url)) { \r\n            console.log(\"Unlocking data for \" + url);\r\n            \r\n            let unlockers = dataObj[url]\r\n            for(let i =0; i <= unlockers.length -1; i ++) { \r\n                let unlocker = new unlockers[i]()\r\n                try { \r\n                    console.log(\"Unlocking \" + unlocker.name);\r\n                    unlocker.unlock()\r\n                }\r\n                catch (e) { \r\n                    analyticsManager.fireErrorEvent(url, e.message, unlocker.name)\r\n                    console.log(unlocker.name + \" Error \" + e)\r\n                }\r\n            }\r\n            break; \r\n        }\r\n    }\r\n}\r\n\r\nfunction main() {\r\n    console.log(\"Unlocker is running\");\r\n    let urls = {\r\n        \"https://leetcode.com/problemset\": [ProblemTableUnlocker, CompaniesProblemUnlocker, TopProblemUnlocker], \r\n        \"https://leetcode.com/problem-list\": [ProblemTableUnlocker, TopProblemUnlocker], \r\n        \"https://leetcode.com/problems\":[ProblemTagsUnlocker, EditorialUnlocker], \r\n        \"https://leetcode.com/study-plan\":[TopProblemUnlocker], \r\n    }\r\n    evaluate(urls)\r\n}\r\n\r\nconsole.log(\"Booting up unlocker wait for 3 seconds\");\r\nsetTimeout(main, 5000)"],"names":[],"sourceRoot":""}